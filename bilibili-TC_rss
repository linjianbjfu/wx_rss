<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>bilibili-TC</id>
    <title>哔哩哔哩技术</title>
    <updated>2024-02-27T05:00:08.590Z</updated>
    <generator>awesome</generator>
    <author>
        <name>哔哩哔哩技术</name>
    </author>
    <subtitle>提供B站相关技术的介绍和讲解</subtitle>
    <logo>http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754SVM7VMibhzz9AicOz5qdQ5oaN6TgXhbVyGHQYPwBErEYQCOnhibA1Qp431JkpPKY0qGhT0EfDchicXMQ/0?wx_fmt=png</logo>
    <icon>http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754SVM7VMibhzz9AicOz5qdQ5oaN6TgXhbVyGHQYPwBErEYQCOnhibA1Qp431JkpPKY0qGhT0EfDchicXMQ/0?wx_fmt=png</icon>
    <entry>
        <title type="html"><![CDATA[FFmpeg前端视频合成实践]]></title>
        <id>2247498441_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498441&amp;idx=1&amp;sn=0fb84abc1a311880c1bb7591c83a80b4&amp;chksm=cf2f3fecf858b6facb7e050f46fe89e72e6eea9c4f346bbfc37287eadfdccc19c8735bff69a4#rd"/>
        <updated>2024-02-26T12:59:06.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 100% 100%;background-repeat: no-repeat;background-size: 162.5%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhb37rnJdfmWN79picD1Q1NkzrcK8HFrJugobtMribEWwVrnOh3AhA54SEw/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014774" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="640" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhb37rnJdfmWN79picD1Q1NkzrcK8HFrJugobtMribEWwVrnOh3AhA54SEw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>梁晴天</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩高级开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>视频合成能力的开发背景</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">想要开发一个具有视频合成功能的应用，从原理层面和应用层面都有一定的复杂度。原理上，视频合成需要应用使用各种算法对音视频数据进行编解码，并处理各类不同音视频格式的封装；应用上，视频合成流程较长，需要对多个输入文件进行并行处理，以实现视频滤镜、剪辑、拼接等功能，使用应用场景变得复杂。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">视频合成应用的代表是各类视频剪辑软件，过去主要以原生应用的形式存在。近年来随着浏览器的接口和能力的不断开放，逐渐也有了Web端视频合成能力的解决思路和方案。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">本文介绍的是一种基于FFmpeg + WebAssembly开发的视频合成能力，与社区既有的方案相比，此方案通过JSON来描述视频合成过程，可提高业务侧使用的便利性和灵活性，对应更多视频合成业务场景。</p><p style="word-break: break-all;white-space: normal;">2023年上半年，基于AI进行内容创作的AIGC趋势来袭。笔者所在的团队负责B站的创作、投稿等业务，也在此期间参与了相关的AIGC创作工具类项目，并负责项目中的Web前端视频合成能力的开发。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>技术选型</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如果需要在应用中引入音视频相关能力，目前业界常见的方案之一是使用FFmpeg。FFmpeg是知名的音视频综合处理框架，使用C语言写成，可提供音视频的录制、格式转换、编辑合成、推流等多种功能。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">而为了在浏览器中能够使用FFmpeg，我们则需要WebAssembly + Emscripten这两种技术：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">WebAssembly是浏览器可以运行的一种类汇编语言，常用于浏览器端上高性能运算的场景。汇编语言一般难以手写，因此有了通过其他高级语言（C/C++, Go, Rust等）编译到WebAssembly的方案。</p></li><li><p style="word-break: break-all;">Emscripten则是一个适用于C/C++项目的编译工具包，我们可以用它来将C/C++项目编译成WebAssembly，并移植到浏览器中运行。WebAssembly + Emscripten两者构筑了C语言项目在浏览器中运行的环境。再加上FFmpeg模块提供的实际的音视频处理能力，理论上我们就可以在浏览器中进行视频合成了。</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>编译FFmpeg至WebAssembly</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">想要通过Emscripten将FFmpeg编译至WebAssembly，需要使用Emscripten。Emscripten本身是一系列编译工具的合称，它仿照gcc中的编译器、链接器、汇编器等程序的分类方式，实现了处理wasm32对象文件的对应工具，例如emcc用于编译到wasm32、wasm-ld用于链接wasm32格式的对象文件等。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">而对于FFmpeg这个大型项目来说，其模块主要分为以下三个部分</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">libav系列库，是构成FFmpeg本身的重要组成部分。提供了用于音视频处理的大量函数，涵盖格式封装、编解码、滤镜、工具函数等多方面</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">第三方库，指的是并非FFmpeg原生提供，需要在编译FFmpeg时，通过编译配置来选择性添加的模块。包括第三方的格式、编解码、协议、硬件加速能力等</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">fftools，FFmpeg提供的三个可执行程序，提供命令行参数界面，使得音视频相关功能的使用更加方便。三个可执行程序分别用于音视频合成、音视频播放、音视频文件元信息提取。因此在编译FFmpeg至WebAssembly时，我们需要按照“优先库，最终可执行程序”的顺序，首先将libav系列库和第三方库编译至wasm32对象文件，最后再编译可执行程序至wasm32对象文件，并与前面的产物链接为完整的FFmpeg WebAssembly版。</p></li></ul><p style="word-break: break-all;white-space: normal;">自行编译FFmpeg到WebAsssembly难度较大，我们在实际在为项目落地时，选择了社区维护的版本。目前社区内维护比较积极，功能相对全面的是<span style="text-decoration: underline;">ffmpeg.wasm</span>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://github.com/ffmpegwasm/ffmpeg.wasm</em></span>）项目。该项目作者也提供了如何<span style="text-decoration: underline;">自行编译FFmpeg到WebAssembly的系列博文</span>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://itnext.io/build-ffmpeg-webassembly-version-ffmpeg-js-part-1-preparation-ed12bf4c8fac</em></span>）</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>FFmpeg在浏览器的运行</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">FFmpeg本身是一个可执行命令行程序。我们可以通过为FFmpeg程序输入不同的参数，来完成各类不同的视频合成任务。例如在终端中输入以下命令，则可以将视频缩放至原来一半大小，并且只保留前5秒：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">ffmpeg -i input.mp4 -vf scale=w=<span class="code-snippet__string">'0.5*iw'</span>:h=<span class="code-snippet__string">'0.5*ih'</span> -t <span class="code-snippet__number">5</span> output.mp4</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014776" data-ratio="0.44722222222222224" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbBoTiaTYsGj0HdnWbFXkc2e9AJxYCrdyC0cBU4zXsTzr8Ml09S5M1wEA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">而在浏览器中，FFmpeg以及视频合成的运行机制如上所示：在业务层，我们为视频合成准备好需要的FFmpeg命令以及若干个输入文件，将其预加载到Emscripten模块的MEMFS（一种虚拟文件系统）中，并同时传递命令至Emscripten模块，最后通过Emscripten的胶水代码驱动WebAssembly进行逻辑计算。视频合成的输出视频会在MEMFS中逐步写入完成，最终可以被取回到业务层</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>对FFmpeg命令行界面进行封装</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">上面的例子中，我们为FFmpeg输入了一个视频文件，以及一串命令行参数，实现了对视频的简单缩放加截断操作。实际情况下，业务侧产生的视频合成需求可能是千变万化的，这样直接调用FFmpeg的方式，会导致业务层需要处理大量代码处理命令行字符串的构建、组合逻辑，就显得不合适宜。同时，我们在项目实践的过程中发现，由于项目需要接入 WebCodecs 和 FFmpeg 两种视频合成能力，这就需要一个中间层，从上层接收业务层表达的视频合成意图，并传递到下层的WebCodecs 或 FFmpeg 进行具体的视频合成逻辑的“翻译”和执行。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>API设计</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014777" data-ratio="0.4888888888888889" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhb5iaclYasmUVfBAwWUmYvWUr2a9So7cJHEcGNqOMT7fbEVsQiaZjUV40Q/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">如上所示，描述一个视频合成任务，可以采用类似“基于时间轴的视频合成工程文件”的方式：在视频剪辑软件中，用户通过可视化的操作界面导入素材，向轨道上拖入素材成为片段，为每个片段设置位移、宽高、不透明度、特效等属性；同理，对于我们的项目来说，业务方自行准备素材资源，并按一定的结构搭建描述视频合成工程的对象树，然后调用中间层的方法执行合成任务。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>分层设计</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014775" data-ratio="0.5074074074074074" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbWRJecOt1GcNBicQqO47rp32BTOiaZ2HX4v8kT8AphRdaRuz9gGEIASwA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以上是我们最终形成的一个分层结构：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">业务方代码使用一个JSON对象来描述自己的视频合成意图。为了方便业务方使用，这一层允许大量使用默认值，无需过多配置；</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">状态层是一个对象树，将视频的全局属性、片段的属性等状态补齐，方便后续的翻译；同时，这一层的各个对象都支持读写，未来可以用于可视化视频编辑器的场景等；</p></li><li><p style="word-break: break-all;">执行层负责FFmpeg命令的翻译和执行逻辑。如果状态层抽象得当，则这个执行层也可以被WebCodecs的翻译和执行模块替换</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>执行流程</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014778" data-ratio="0.5444444444444444" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbaS4HIgHvOTnyiatbhRyV5dnM3Whg9vzPfKkjodDyu3XAdSNgMmrFRTA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">以上是我们最终实现的FFmpeg前端视频合成能力，各个模块在运行时的相互调用时序图。各个模块之间并不是简单地按顺序层层向下调用，再层层向上返回。有以下这些点值得注意</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>状态树，是JSON + 文件元信息综合生成的</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">例如，业务方想要把一个宽高未知的视频片段，放置在最终合成视频（假设为1280x720）的正中央时，我们需要将视频片段的transform.left设置为(1280 - videoWidth) / 2，transform.top 设置为&nbsp;(720 - videoHeight) / 2。这里的videoWidth, videoHeight就需要通过FFmpeg读取文件元信息得到。因此我们设计的流程中，需要对所有输入的资源文件进行预加载，再生成状态树。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>输出结果多样化</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">实践过程中我们发现，业务方在使用FFmpeg能力时，至少需要使用以下三种不同的形式的输出结果：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">事件回调：例如业务方所需的合成进度、合成开始、合成结束等</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">合成结果的二进制文件：合成结束时异步返回</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">日志结果：例如获取文件元信息，获取音频的平均音量等操作，FFmpeg的输出都是以log的形式</p></li></ul><p style="word-break: break-all;white-space: normal;">因此我们为执行层的输出设计了这样的统一接口</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">export</span> interface RunTaskResult {</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__comment">/** 日志树结果 */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__built_in">log</span>: LogNode</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__comment">/** 二进制文件结果 */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;output: Uint8Array</span></code><br><code><span class="code-snippet_outer">}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__function">function <span class="code-snippet__title">runProject</span><span class="code-snippet__params">(json: ProjectJson)</span>: </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__comment">/** 事件结果 */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;evt: EventEmitter&lt;RunProjectEvents, any&gt;;</span></code><br><code><span class="code-snippet_outer"> &nbsp;result: Promise&lt;RunTaskResult&gt;;</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>部分代码实现</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>执行主流程</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">runProject 函数是我们对外提供的视频合成的主函数。包含了“对输入JSON进行校验，补全、预加载文件并获取文件元信息、预加载字幕相关文件、翻译FFmpeg命令、执行、emit事件”等多种逻辑。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">/**</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment"> * 按照projectJson执行视频合成</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment"> * @public</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment"> * @param json - 一个视频合成工程的描述JSON</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment"> * @returns 一个evt对象，用以获取合成进度，以及异步返回的视频合成结果数据</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment"> */</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__function"><span class="code-snippet__keyword">export</span> function <span class="code-snippet__title">runProject</span><span class="code-snippet__params">(json: ProjectJson)</span> </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">const</span> evt = <span class="code-snippet__keyword">new</span> EventEmitter&lt;RunProjectEvents&gt;()</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">const</span> steps = async () =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// hack 这里需要加入一个异步，使得最早在evt上emit的事件可以被evt.on所设置的回调函数监听到</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;await Promise.resolve()</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> parsedJson = ProjectSchema.parse(json) <span class="code-snippet__comment">// 使用json schema验证并补全一些默认值</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 预加载并获取文件元信息</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt.emit(<span class="code-snippet__string">'preload_all_start'</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> preloadedClips = [</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;...await preloadAllResourceClips(parsedJson, evt),</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;...await preloadAllTextClips(parsedJson)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;]</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 预加载字幕相关信息</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> subtitleInfo = await preloadSubtitle(parsedJson, evt)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt.emit(<span class="code-snippet__string">'preload_all_end'</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 生成project对象树</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> projectObj = initProject(parsedJson, preloadedClips)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 生成ffmpeg命令</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> { fsOutputPath, fsInputs, args } = parseProject(projectObj, parsedJson, preloadedClips, subtitleInfo)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> (subtitleInfo.hasSubtitle) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;fsInputs.push(subtitleInfo.srtInfo!, subtitleInfo.fontInfo!)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 在ffmpeg任务队列里执行</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> task: FFmpegTask = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;fsOutputPath,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;fsInputs,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;args</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 处理进度事件</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;task.logHandler = (<span class="code-snippet__built_in">log</span>) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> p = getProgressFromLog(<span class="code-snippet__built_in">log</span>, project.timeline.end)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> (p !== undefined) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;evt.emit(<span class="code-snippet__string">'progress'</span>, p)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt.emit(<span class="code-snippet__string">'start'</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 返回执行日志，最终合成文件，事件等多种形式的结果</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> res = runInQueue(task)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;await res</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt.emit(<span class="code-snippet__string">'end'</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> res</span></code><br><code><span class="code-snippet_outer"> &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">return</span> {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;result: steps()</span></code><br><code><span class="code-snippet_outer"> &nbsp;}</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>翻译流程</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">FFmpeg命令的翻译流程，对应的是上述runProject方法中的parseProject，是在所有的上下文（视频合成描述JSON对象，状态树文件预加载后的元信息等）都齐备的情况下执行的。本身是一段很长，且下游较深的同步执行代码。这里用伪代码描述一下parseProject的过程</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="go"><code><span class="code-snippet_outer"><span class="code-snippet__number">1.</span> 实例化一个命令行参数操作对象ctx，此对象用于表达命令行参数的结构，可以设置有哪些输入（多个）和哪些输出（一个），并提供一些简便的方法用以操作filtergraph</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__number">2.</span> 初始化一个视频流的空数组layers（这里指广义的视频流，只要是有图像信息的输入流（例如视频、占一定时长的图片、文字片段转成的图片），都算作视频流）；初始化一个音频流的空数组audios</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__number">3.</span> （作为最终合成的视频或音频内容的基底）在layers中加入一个颜色为project.backgroundColor, 大小为project.size，时长为无限长的纯色的视频流；在audios中加入一个无声的，时长为无限长的静音音频流</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__number">4.</span> 对于每一个project中的片段</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__number">1.</span> 将片段中所包含的资源的url添加到ctx的输入数组中</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__number">2.</span> （从所有已预加载的文件元信息中）找到这个片段对应的元信息（宽高、时长等）</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__number">3.</span> （处理片段本身的截取、宽高、旋转、不透明度、动画等的处理）基于此片段的JSON定义和预加载信息，翻译成一组作用于该片段的FFmpeg filters，并且这一组filters之间需要相互串联，filters头部连接到此片段的输入流。得到片段对应的中间流。</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__number">4.</span> 获取到的中间流，如果是广义的视频流的，推入layers数组；如果是广义的音频流的，推入audios数组</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__number">5.</span> 视频流layers数组做一个类似reduce的操作，按照画面中内容叠放的顺序，从最底层到最顶层，逐个合并流，得到单个视频流作为最终视频输出流。</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__number">6.</span> 音频流audios数组进行混音，得到单个音频流作为最终输出流。</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__number">7.</span> 调用ctx的toString方法，此方法是会将整个命令行参数结构输出为<span class="code-snippet__keyword">string</span>。ctx下属的各类对象(Input, Option, FilterGraph)都有自己的toString方法，它们会依次层层toString，最终形成整体的ffmpeg命令行参数</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>动画能力</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">适当的元素动画有助提高视频的画面丰富度，我们实现的视频合成能力中，也对元素动画能力进行了初步支持。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;业务端如何配置动画</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在视频剪辑软件中，为元素配置动画主要是基于关键帧模型，典型操作步骤如下：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">选中画布中的一个元素后</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">在时间轴上为元素的某一属性添加若干个关键帧</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">在每个关键帧上，为该属性设置不同的值。例如将位于第1秒的关键帧的x方向位移设置为0，将位于第5秒的关键帧的x方向位移设置为100</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">软件会自动将1-5秒的动画过程补帧出来，预览播放（以及最后合成的结果中）就可以看到元素从第1秒到第5秒向下平移的效果。而在前端开发中，通过CSS的@keyframes所声明的动画，也与上述关键帧模型吻合。除此之外，在CSS动画标准中，我们还需要附加以下这些信息，才能将一段关键帧动画应用到元素上</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">delay延迟（动画在元素出现后，延迟多少时间再开始播放）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">iterationCount（动画需要重复播放多少次）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">duration（在单次重复播放内，动画所占总时长）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">timingFunction（动画的补帧方式。线性方式实现简单但关键帧之间的过渡生硬，因此一般会采用“ease-in-out”等带有缓进缓出的非线性方式）。除此之外还有direction, fillMode等配置，这些并未在我们的视频合成能力中实现，故不再赘述。</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在视频合成描述JSON中，我们参照了CSS动画声明进行了以下设计，来满足元素动画的配置</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">为片段了定义了 x, y, w, h, angle, opacity这六种可配置的属性（涵盖了位移、缩放、旋转、不透明度等）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">对于需要静态配置的属性，在static字段的子字段中配置</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">对于需要动画配置的属性，在animation字段的子字段中逐个关键帧进行配置</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">animation字段同时可以进行duration, delay等动画附加信息的配置</p></li></ul><p style="word-break: break-all;white-space: normal;">以下是元素动画配置的例子</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 视频片段bg.mp4，在画面的100,100处出现，并伴随有闪烁（不透明度从0到1再到0）的动画，动画延迟1秒，时长5秒</span></span></code><br><code><span class="code-snippet_outer">{</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__string">"type"</span>: <span class="code-snippet__string">"video"</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__string">"url"</span>: <span class="code-snippet__string">"/bg.mp4"</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__string">"static"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"x"</span>: <span class="code-snippet__number">100</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"y"</span>: <span class="code-snippet__number">100</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__string">"animation"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"properties"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"delay"</span>: <span class="code-snippet__number">1</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"duration"</span>: <span class="code-snippet__number">5</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"keyframes"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"0"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"opacity"</span>: <span class="code-snippet__number">0</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"50"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"opacity"</span>: <span class="code-snippet__number">1</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"100"</span>: {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__string">"opacity"</span>: <span class="code-snippet__number">0</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp;}</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>FFmpeg合成添加动画效果的原理</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">动画效果的本质是一定时间内，元素的某个状态逐帧连续变化。而FFmpeg的视频合成的实际操作都是由filter完成的，所以想要在FFmpeg视频合成中添加动画，则需要视频类的filter支持按视频的当前时间，逐帧动态设置filter的参数值。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以overlay filter为例，此filter可以将两个视频层叠在一起，并设置位于顶层的视频相对位置。如果无需设置动画时，我们可以将参数写成overlay=x=100:y=100表示将顶层视频放置在距离底层视频左上角100,100的位置。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">需要设置动画时，我们也可以设置x, y为包含了t变量（当前时间）的表达式。例如overlay=x=t*100:y=t*100，可以用来表达顶层视频从左上到右下的位移动画，逐帧计算可知第0秒坐标为0,0，第1秒时坐标为100,100，以此类推。</p><p style="word-break: break-all;white-space: normal;">像overlay=x=expr:y=expr这样的，expr的部分被称为FFmpeg的表达式，它也可以看成是以时间（以及其他一些可用的变量）作为输入，以filter的属性值作为输出的函数。表达式中除了可以使用实数、t变量、各类算术运算符之外，还可以使用很多内置函数，具体可参考<span style="text-decoration: underline;">FFmpeg文档中对于表达式取值的说明</span>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://ffmpeg.org/ffmpeg-utils.html#Expression-Evaluation</em></span>）</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>常见动画模式的表达式总结</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">由于表达式的本质是函数，我们在把动画翻译成FFmpeg表达式时，可以先绘制动画的函数图像，然后再从FFmpeg表达式的可用变量、内置函数、运算符中，进行适当组合来还原函数图像。下面是一些常见的动画模式的FFmpeg表达式对应实现</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>动画的分段</strong></p><p style="word-break: break-all;white-space: normal;">假设对于某元素，我们设置了一个向上弹跳一次的动画，此动画有一定延迟，并且只循环一次，动画已结束后又过了一段时间，元素再消失。则此元素的y属性函数图像及其公式可能如下</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 70%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014780" data-ratio="0.8614457831325302" data-s="300,640" data-type="png" data-w="332" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbao0Wr9MTBdUvYEK2NQXb2VtmLJjHgCpbRt2Zobdz4sEUxLuc2j39UA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014782" data-ratio="0.26479750778816197" data-s="300,640" data-type="png" data-w="642" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbfL5e24wSomzVlWzfAglk7MvIhib6YGxyVuHkGsSwu6obezX8r1035ZQ/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">通过以上函数图像我们可知，此类函数无法通过一个单一部分表达出来。在FFmpeg表达式中，我们需要将三个子表达式，按条件组合到一个大表达式中。对于分段的函数，我们可以使用FFmpeg自带的if(x,y,z)函数（类似脚本语言中的三元表达式）来等价模拟，将条件判断/then分支/else分支 这三个子表达式 分别传入并组合到一起。对于分支有两个以上的情况，则在else分支处再嵌入新的if(x,y,z)即可。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"># 实际在生成表达式时，所有的换行和空格可以省略</span></code><br><code><span class="code-snippet_outer">y=</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__keyword">if</span>(</span></code><br><code><span class="code-snippet_outer"> &nbsp;lt(t,<span class="code-snippet__number">2</span>), &nbsp;<span class="code-snippet__meta"># lt函数相当于&lt;操作符</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__number">1</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">if</span>(</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;lt(t,<span class="code-snippet__number">4</span>),</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__built_in">sin</span>(-PI*t/<span class="code-snippet__number">2</span>)+<span class="code-snippet__number">1</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__number">1</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;)</span></code><br><code><span class="code-snippet_outer">)</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们可以实现一个递归函数nestedIfElse，来将N个条件判断表达式和N+1个分支表达式组合起来，成为一个大的FFmpeg表达式，用于分段动画的场景</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">function <span class="code-snippet__title">nestedIfElse</span><span class="code-snippet__params">(branches: <span class="code-snippet__built_in">string</span>[], predicates: <span class="code-snippet__built_in">string</span>[])</span> </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__comment">// 如果只有一个逻辑分支，则返回此分支的表达式</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">if</span> (branches.length === <span class="code-snippet__number">1</span>) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> branches[<span class="code-snippet__number">0</span>]</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__comment">// 如果有两个逻辑分支，则只有一个条件判断表达式，使用if(x,y,z)组合在一些即可</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;} <span class="code-snippet__keyword">else</span> <span class="code-snippet__keyword">if</span> (branches.length === <span class="code-snippet__number">2</span>) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> predicate = predicates[<span class="code-snippet__number">0</span>]</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> [ifBranch, elseBranch] = branches</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> `<span class="code-snippet__keyword">if</span>(${predicate},${ifBranch},${elseBranch})`</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__comment">// 递归case</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;} <span class="code-snippet__keyword">else</span> {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> predicate = predicates.shift()</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> ifBranch = branches.shift()</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> elseBranch = nestedIfElse(branches, predicates) as <span class="code-snippet__built_in">string</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> `<span class="code-snippet__keyword">if</span>(${predicate},${ifBranch},${elseBranch})`</span></code><br><code><span class="code-snippet_outer"> &nbsp;}</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>线性和非线性补帧</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">补帧是将关键帧间的空白填补，并连接为动画的基本方式。被补出来的每一帧中，对应的属性值需要使用插值函数进行计算。</p><p style="word-break: break-all;white-space: normal;">对于线性插值，FFmpeg自带了lerp(x,y,z)函数，表示从x开始到y结束，按z的比例（z为0到1的比值）线性插值的结果。因此我们可以结合上面的if(x,y,z)函数的分段功能，实现一个多关键帧的线性补帧动画。例如，某属性有两个关键帧，在t1时属性值为a，在t2时属性值为b，则补帧表达式为</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014779" data-ratio="0.25691699604743085" data-s="300,640" data-type="png" data-w="506" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbvXu2xiczroGZ9tSPpKpUDUGiaqDcMGhfffNp3jGnOeICguRJkTklC2lw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">对于非线性补帧，我们可以将其理解为在上述线性补帧公式的基础上，将lerp(x,y,z)函数的z参数（进度的比例）再进行一次变换，使得动画的行进变得不均匀即可。以下公式中的t'代表了一种典型的缓慢开始和缓慢结束的缓动函数(timing function)，将其代入原公式即可</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014783" data-ratio="0.5865921787709497" data-s="300,640" data-type="png" data-w="716" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbFQNUoEebibKWrh3QtfWngez6dR3F8SQ4t3HVHwW9Z17jSJD09AJk9cw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 80%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014781" data-ratio="1" data-s="300,640" data-type="png" data-w="414" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbJ3KPSDEm36pbAYJ1IcvialMkXDOiaPiakiaN9JsQHRPHUC2yDkA6YhODCg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup style="font-size: 12px;">（图中展示了从左下角的关键帧到右上角的关键帧的&nbsp;</sup></p><p><sup style="font-size: 12px;">线性/非线性 补帧的函数图像）</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">以下是对应的代码实现</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 假设有关键帧(t1, v1)和(t2, v2)，返回这两个关键帧之间的非线性补帧表达式</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__function">function <span class="code-snippet__title">easeInOut</span><span class="code-snippet__params">(</span></span></span></code><br><code><span class="code-snippet_outer"> &nbsp;t1: number, v1: number,</span></code><br><code><span class="code-snippet_outer"> &nbsp;t2: number, v2: number</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet_outer">)</span> {</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">const</span> t = `t-${t1})/(${t2-t1})`</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">const</span> tp = `<span class="code-snippet__keyword">if</span>(lt(${t},<span class="code-snippet__number">0.5</span>),<span class="code-snippet__number">4</span>*<span class="code-snippet__built_in">pow</span>(${t},<span class="code-snippet__number">3</span>),<span class="code-snippet__number">1</span>-<span class="code-snippet__built_in">pow</span>(<span class="code-snippet__number">-2</span>*${t}+<span class="code-snippet__number">2</span>,<span class="code-snippet__number">3</span>)/<span class="code-snippet__number">2</span>)`</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">return</span> `lerp(${v1},${v2},${tp})`</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>循环</strong></p><p style="word-break: break-all;white-space: normal;">如果我们需要表达一个带有循环的动画，最直接的方式是将某个时段上的映射关系，复制并平移到其他的时段上。例如，想要实现一个从画面左侧平移至右侧的动画，重复多次时，我们可能使用下面这样的函数</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014785" data-ratio="0.421455938697318" data-s="300,640" data-type="png" data-w="522" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbHgX6gibNAnhJiaR8gdYBpnCY7NTvfdjNDYdqnGqIXZYo3YOBPj92ZjIA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以上使用分段函数的写法的问题在于，如果循环次数过多时，函数的分支较多，产生的表达式很长，也会影响在视频合成时对表达式求值的性能。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">事实上，我们可以引入FFmpeg表达式中自带的mod(x,y)函数（取余操作）来实现循环。由于取余操作常用来生成一个固定范围内的输出，例如不断重复播放的过程。上面的函数，在引入mod(x,y)后，可以简化为 x=mod(t,1)。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">上述对于动画分段、循环、补帧如何实现的问题，其共通点都是如何找到其对应函数，并在FFmpeg中翻译为对应的表达式，或者对已有表达式进行组合。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">据此，我们实现了KFAttr（关键帧属性，用以封装关键帧和动画全局配置等信息）和TimeExpr（以KFAttr作为入参，并翻译为FFmpeg表达式）两个类。其中，TimeExpr的整体算法大致如下：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.将动画分成前，中，后三部分。前半部分是由于delay配置导致的，元素已出现但动画还未开始的静止部分；中间部分是动画的主体部分；后半部分是由于动画重复次数较少，元素未消失但动画已结束的静止部分</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.对于前半部分，表达式设置为等于关键帧中第一帧的值；对于后半部分，表达式设置为等于关键帧中最后一值的值</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3.对于中间部分 &nbsp;</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">3.1 将keyframes中声明的每个关键帧点（某个百分比及其对应值），结合动画的duration配置，缩放为新的关键帧点（某个时间点及其对应值） &nbsp;</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">3.2 根据上述关键帧，获取predicates数组（也就是动画中间部分，进入每一个分支的条件表达式，例如t&lt;2, t&lt;5 等）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">3.3 根据上述关键帧，获取branches数组（也就是动画中间部分，每一个分支本身的表达式）。每一个branch声明了一个关键帧到下一个关键帧的连接，也就是补帧表达式 &nbsp;</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">3.4 使用nestedIfElse(branches, predicates)组合出中间部分的表达式</p></li></ul><p style="word-break: break-all;white-space: normal;">4.再次使用nestedIfElse，将前、中、后三部分组合成最终的表达式</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>浏览器里视频合成的内存不足问题</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">在项目实践的过程中，我们发现浏览器中通过ffmpeg.wasm进行视频合成时，有一定机率出现内存不足的现象。表现为以下Emscripten的运行时报错（OOM为Out of memory的缩写）</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">exception thrown: RuntimeError: <span class="code-snippet__built_in">abort</span> (<span class="code-snippet__number">00</span>M). Build with -s ASSERTIONS=<span class="code-snippet__number">1</span> <span class="code-snippet__keyword">for</span> more info.RuntimeError: <span class="code-snippet__built_in">abort</span> (<span class="code-snippet__number">00</span>M). Build with -s ASSERTIONS=<span class="code-snippet__number">1</span> <span class="code-snippet__keyword">for</span> more info.</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">分析后我们认为，内存不足的问题主要是由于以下这些因素导致的</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">视频合成本身是开销很大的计算过程，这是由于音视频文件往往都有着很高的压缩率，在合成时，音视频文件被解码成未压缩的数据，占用了大量内存</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">和原生环境相比，浏览器中的应用会额外受到单个标签页可使用的最大内存的限制。例如在64位系统的Chrome中，一个标签页最多可使用的内存大小为4GB</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">浏览器沙盒机制，不允许Web应用直接读写客户端本地文件。而Emscripten为了使得移植的C/C++项目仍能够拥有原来的文件读写的能力，实现了一个MEMFS的虚拟文件系统。将文件预加载到内存中，把对磁盘的读写转换为对内存的读写。这部分文件的读写也占用了一定的内存。在浏览器中运行视频合成时，还会额外受到浏览器对于单个标签页可使用的最大内存的限制（在64位的Chrome中，最多可为一个标签页分配4G内存）</p></li></ul><p style="word-break: break-all;white-space: normal;">为了应对以上问题，在实践中，我们采取了以下这些策略，来减少内存不足导致的合成失败率：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>视频合成的严格串行执行</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">视频合成的过程出现了并发时，会加剧内存不足现象的产生。因此我们在runProject以及其他FFmpeg执行方法背后实现了一个统一的任务队列，确保一个任务在执行完成后再进行下一个任务，并且在下一个任务开始执行前，重启ffmpeg.wasm的运行时，实现内存垃圾回收。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>时间分段，多次合成</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">实践中我们发现，如果一个FFmpeg命令中输入的音视频素材文件过多时，即使这些素材在时间线上都重叠（也就是某一时间点上，所有的素材视频画面都需要出现在最终画面中）的情况很少，也会大大提高内存不足的概率。</p><p style="word-break: break-all;white-space: normal;">我们采取了对视频合成的结果进行时间分段的策略。根据每个片段在时间轴上的分布情况，将整个视频合成的FFmpeg任务，拆分成多个规模更小的FFmpeg任务。每个任务仅需要2-3个输入文件（常规的视频合成需求中，同屏同时播放的视频最多也在3个左右），各任务单独进行视频合成，最后再使用FFmpeg的concat功能，将视频前后相接即可。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>减少重编码的场景</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">视频合成的重编码（解码输入文件，操作数据并再编码），会消耗大量的CPU和内存资源。而视频和音频的前后拼接操作，则无需重编码，可以在非常短的时间内完成。</p><p style="word-break: break-all;white-space: normal;">对于不太复杂的视频合成场景，往往并不是画面的每一帧都需要重新编码再输出的。我们可以分析视频合成的时间轴，找出不需要重编码的时间段（指的是此时画面内容仅来自一个输入文件，并且没有缩放旋转等滤镜效果，没有其他层叠的内容的时间段）。对这些时间段，我们通过FFmpeg的流拷贝功能截取出来（通过-vcodec copy命令行参数实现）即可，这样进一步减少了CPU和内存的消耗。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>在视频中添加文字的实践</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在视频中添加文字是视频合成的常见需求，这类需求可以大致分为两种情况：少量的样式复杂的艺术字，大量的字幕文字。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">FFmpeg自带的filters中提供了以下的文字绘制能力，包括：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">subtitles，配合srt格式的字幕文件。适合大量添加字幕，对样式定制化不高的场景</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">drawtext，绘制单条文字，并进行一些简单的样式配置。如果不使用filters，由于我们是在浏览器作为上层环境使用FFmpeg的，此时也可以使用DOM API提供的一些文字转图片的技术（例如直接使用Canvas API的fillText绘制文字，或者使用SVG的foreignObject对包含文字的html文档进行图片转换等），把文字当作图片文件进行处理。</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">最初在支持视频合成方案的文字能力时，我们选择了后者的文字转图片技术，基本满足了业务需求。这一做法的优势在于：复用DOM的文字渲染能力，绘制效果好并且支持的文字样式丰富；并且由于转换为图片处理，可以让文字直接支持缩放、旋转、动画等许多已经在图片上实现的能力。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">但正如上面提到的“为FFmpeg的命令一次性输入过多的文件容易引起OOM”的问题，文字转为图片后，视频合成时需要额外导入的图片输入文件也增加了。这也促使我们开始关注FFmpeg自带的文字渲染能力。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">FFmpeg自带subtitles, drawtext等文字渲染能力，底层都使用了C语言的字体字符库（包括freetype字体光栅化，harfbuzz文字塑形，fribidi双向编码等），在每一帧编码前的filter阶段，将字符按指定的字体和样式即时绘制成位图，并与当前的framebuffer混合来实现的。这种做法会耗费更多的计算资源，但同时因为不需要缓存或文件，使用的内存更少。因此我们对于制作字幕这样需要大量添加固定样式的文字的场景，提供了相应的JSON配置，并在底层使用FFmpeg的subtitles filter进行绘制，避免了OOM的问题。</p><p style="word-break: break-all;white-space: normal;">基于浏览器和FFmpeg本身的现有能力，在视频中添加文字的方案还可以有更多探索的可能。例如可以“使用SVG来声明文字的内容和样式，并在FFmpeg侧进行渲染”来实现。SVG方案的优点在于：文字的样式控制能力强；可以随意添加任意的文字的前景、背景矢量图形；与位图相比占用资源少等。后续在进行自编译的FFmpeg WebAssembly版相关调研时，会尝试支持。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>后续迭代</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">通过 Emscripten 移植到浏览器运行的 FFmpeg，在性能上与原生FFmpeg有很大差距，大体原因在于浏览器作为中间环境，其现有的API能力不足，以及一些安全政策的限制，导致 FFmpeg 对于硬件能力的利用受限。随着浏览器能力和API的逐步演进，FFmpeg + WebAssembly 的编译、运行方式都可以与时俱进，以达到提高性能的目的。目前可以预见的一些优化点有：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">文件IO方面，接入浏览器的<span style="text-decoration: underline;">OPFS</span>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API#origin_private_file_system</em></span>）。这是浏览器中访问文件系统的一种新API，有较高的读写性能。未来有可能被Emscripten实现，以替换掉当前默认的MEMFS</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">并行计算方面，考虑使用<span style="text-decoration: underline;">WebAssembly SIMD</span>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://v8.dev/features/simd</em></span>）。SIMD可以更充分地使用CPU进行并行计算。对于图像处理较多的编码场景（例如x264编码器），适当地使用WebAssembly的SIMD来优化代码有助于提高编码性能</p></li><li><p style="word-break: break-all;">图像处理方面，尝试使用WebGL优化。WebGL为浏览器提供了基于显卡的并行计算的能力，特别适合对视频抠像、滤镜、转场等应用场景进行加速。</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;justify-content: center;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>你的前端项目中有落地实践过音视频能力吗？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>日版赫斯缇雅手办景品一个</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>3月1日中午12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 35%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014786" data-ratio="2.19941348973607" data-s="300,640" data-type="jpeg" data-w="682" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RdMyqzxL0gYJT1xlF3OUhbWWp6nDPHpibeqSVjPxAt5MfxuicCjG5MzdSOlibg3JkcHMhbKTbboUpZw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;justify-content: center;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247496872&amp;idx=1&amp;sn=7647f520422d80760060e18a99163d13&amp;chksm=cf2f318df858b89b7da28bad96e56672859fa867a731040e60bd2751592f6a13ae4f3e85df72&amp;scene=21#wechat_redirect" textvalue="基于多模态的视频高能点提取技术" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">基于多模态的视频高能点提取技术</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498175&amp;idx=1&amp;sn=c00bc752a72595fc8d52174301116626&amp;chksm=cf2f3c9af858b58c9d7902bfca13d5940fa5e5cd5565b2c9f91c93c4296859eda9464a34b521&amp;scene=21#wechat_redirect" textvalue="WebCodecs 开启 Web 音视频新篇章" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">WebCodecs 开启 Web 音视频新篇章</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498279&amp;idx=1&amp;sn=6b537b59cfb7b03777946de43c50689b&amp;chksm=cf2f3f02f858b614fae703d2fd19e166e87b04af9ac6f48b13d8a333dd34f5da0ce09bfb6770&amp;scene=21#wechat_redirect" textvalue="基于WebCodecs的网页端高性能视频截帧" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">基于WebCodecs的网页端高性能视频截帧</a></p></li></ul></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;font-size: 13px;letter-spacing: 4px;" powered-by="xiumi.us"><p><a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=3289447926347317252#wechat_redirect" textvalue="通用工程" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">通用工程</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2390333109742534656#wechat_redirect" textvalue="大前端" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">大前端</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=3297757408550699008#wechat_redirect" textvalue="业务线" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">业务线</span></a><br></p><p><a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2329861166598127619#wechat_redirect" textvalue="大数据" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">大数据</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2782124818895699969#wechat_redirect" textvalue="AI" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">AI</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2532608330440081409#wechat_redirect" textvalue="多媒体" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">多媒体</span></a></p><p><span style="color: rgb(12, 182, 242);"><br></span></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754SVM7VMibhzz9AicOz5qdQ5oaN6TgXhbVyGHQYPwBErEYQCOnhibA1Qp431JkpPKY0qGhT0EfDchicXMQ/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p></div></div><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>梁晴天</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebGL高质量实时角色渲染]]></title>
        <id>2247498417_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498417&amp;idx=1&amp;sn=f2c196d6224d8273fdcd42498429ce43&amp;chksm=cf2f3f94f858b682c031213895ceac8f514018fa2892d0411b1c68b717396807a956f0d96050#rd"/>
        <updated>2024-02-22T12:48:28.000Z</updated>
        <summary type="html"><![CDATA[<div><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;background-position: center center;background-repeat: no-repeat;background-size: cover;overflow: hidden;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QsoomDywL7COia5PI9QdJqnF0BrBAD4SX2qsiaQeC5G1ehjEm2bUgmPbcgAOGmxW1Nv6gopZqS1cyg/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014722" data-ratio="1.1222222222222222" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QsoomDywL7COia5PI9QdJqnF0BrBAD4SX2qsiaQeC5G1ehjEm2bUgmPbcgAOGmxW1Nv6gopZqS1cyg/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>万成</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩资深技术美术</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014723" data-ratio="0.4222222222222222" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnxWgndSYqg6sjhO4oliatic9FM6oXvHMuYMKyAicD8MFFRFGNwdSLXib2Pg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>背景</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">随着图形图像渲染技术的快速发展，如何在移动端呈现出高质量的数字人渲染效果，是实时渲染领域最主流的技术研究方向之一。对于B站移动端App而言，如果使用主流的实时渲染引擎如Unreal/Unity等，都会带来100-130M左右的安装包体积增量，进而增加应用安装和版本更新的成本。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">针对该问题，我们选择了更为灵活轻量的WebGL渲染方案，将包体增量大幅降低至1M以内，同时借助Web天然的开箱即用特性，加速了业务需求在移动端落地的整体节奏。经过对Web渲染能力的行业调研，我们最终从众多的Web3D渲染引擎中选择了Three.JS。Three.JS作为一款轻量级的JavaScript 3D渲染库，具备强大的图形能力和广泛的社区支持，在数字人渲染方向能够给予我们一定的基础能力支持。</p><p style="word-break: break-all;white-space: normal;">但如果只是使用Three.JS自带的PBR（Physically-Based Rendering）渲染，在偏CG和写实方向的数字人渲染效果上，很难达到令人满意的品质感。为了能够进一步还原商业实时渲染引擎Unreal的人物效果，同时兼顾好WebGL在移动设备上的性能和发热问题，我们在人物皮肤，瞳孔，抗锯齿，半透明等方向上做了深入的二次研发，提出了一套完整的高质量角色移动端WebGL渲染解决方案。本文将分享我们在探索和实现该方案的过程中遇到的挑战及最终的解决思路。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>PBR优化</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">PBR（Physically-Based Rendering）是一种计算机图形学中的渲染技术，旨在模拟（近似）光线在现实世界中的物理行为，以实现更真实、逼真的渲染效果。因此我们的美术资产的制作采用了全套PBR流程，Three.JS内置的MeshPhysicalMaterial也对PBR做了材质支持，但我们发现Three.JS的PBR实现在移动端上依然存在性能瓶颈。所以针对以上问题我们给出了如下解决方案：</p><p style="word-break: break-all;white-space: normal;">首先我们来看Cook-Torrance的BRDF模型：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014721" data-ratio="0.12449799196787148" data-s="300,640" data-type="png" data-w="498" style="vertical-align: middle;width: 298px;height: 37px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnufIAzW8Lq7WJLrk9shteP8fydCR6qkxrTX8wEt4f5eMWYpibZ6wa79w/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">其中Cook-Torrance镜面反射如下：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014720" data-ratio="0.2288135593220339" data-s="300,640" data-type="png" data-w="472" style="vertical-align: middle;width: 282px;height: 65px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqn7Wxmgd0ibnocls9ukYwIOzhCsraxbicj7AxQricotWu8VkXpKPaibuspmA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">D表示法线分布函数（Normal Distribution Function）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">G表示几何函数（Geometry function）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">F表示菲尼尔函数（Fresnel function）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">n表示法线方向，l表示灯光方向，v表示视线方向，h表示l与v的中间方向（halfway）</p><p style="word-break: break-all;white-space: normal;">首先，我们使用 UE4 粗糙度的定义，将它用于以下所有方程中的α：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014719" data-ratio="0.17647058823529413" data-s="300,640" data-type="png" data-w="255" style="vertical-align: middle;width: 160px;height: 28px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnicKjN0WicU8dVpCwe31k20gbZlzPOKtS7lzmOMUGaGiaicU9lf0BuhM6Nw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">分布函数：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014728" data-ratio="0.15160796324655437" data-s="300,640" data-type="png" data-w="653" style="vertical-align: middle;width: 320px;height: 49px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnFFLwhg903DUicGdxj0UlE8t09ib0Lww4AmspTVtG2vcgrOganWLB9YDA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">几何函数：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014727" data-ratio="0.14246947082767977" data-s="300,640" data-type="png" data-w="737" style="vertical-align: middle;width: 366px;height: 52px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnvnTvQGd9AOQueeWTxzly2F9RrLrBSJ8GLdNlMSKkAAN9b8TQuJTBMw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们使用史密斯方法（Smith's method）将G_GGX作为子函数G_sub：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014725" data-ratio="0.09330985915492958" data-s="300,640" data-type="png" data-w="568" style="vertical-align: middle;width: 296px;height: 28px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnfjM75njvbsNCCEzdDMDP12ACy6b7DzcCFCWtBQAQYyabic2rqFBqemg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">菲尼尔函数：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014724" data-ratio="0.08307692307692308" data-s="300,640" data-type="png" data-w="650" style="vertical-align: middle;width: 362px;height: 30px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnM5REeVEoGtUl8sAXlG8ArQOLjBrd8iaSEIh3Xwdibap21EMzUicPVjySw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">F0表示表明的基础反射率，一般我们采用vec3(0.04)</p><p style="word-break: break-all;white-space: normal;">我们还可以将镜面反射分母与几何函数进行合并得到可见性项（Visibility）：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014726" data-ratio="0.30844155844155846" data-s="300,640" data-type="png" data-w="308" style="vertical-align: middle;width: 136px;height: 42px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnNxHZXaC0ibWviawej7nhlY4WJDa2BXOnh8K1gEKjYmzZFkggH3HDzthg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">最后我们得到了：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014731" data-ratio="0.09653465346534654" data-s="300,640" data-type="png" data-w="404" style="vertical-align: middle;width: 253px;height: 24px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnxT4fQYNSc651SW8TvxZYuBdJrfQhmGibsow42UJ3twl2j4A3bGUrGow/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们发现几何函数里有除法和求平方根，写成代码为：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014730" data-ratio="0.19534883720930232" data-s="300,640" data-type="png" data-w="430" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnOdRznCz5Q6zwJSGJognkR7WFbmK0AwW4g70ZCia8WRkiaCtgDA4GnG1g/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">有没有办法简化呢？根据SIGGRAPH 2015 Optimizing PBR for Mobile有关简化VF项：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014729" data-ratio="0.1723027375201288" data-s="300,640" data-type="png" data-w="621" style="vertical-align: middle;width: 334px;height: 58px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnj2PXVo5beZvicG6BrctVnAj1RdiaLBvY116Rp33Fl9UlSBSSZMugXZXg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">最终我们的表达式：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014732" data-ratio="0.10355648535564854" data-s="300,640" data-type="png" data-w="956" style="vertical-align: middle;width: 496px;height: 51px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqn6pPKAqh5edPWe3ju0QlPWiaO6iac7QiaibB7lxW6uiaaywPwHgGSOsE3Lww/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">加和乘，仅有一次除法。</p><p style="word-break: break-all;white-space: normal;"><strong>与Three.JS内置PBR性能对比</strong></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014733" data-ratio="0.537962962962963" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnhlsYUxBLliaYPiaSo5xqCdqkibK7OH3oniaVfqtYKib9TKoic9aYcmaZ77gg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们设计了一个测试场景，仅渲染一个角色，同时去除了其他干扰，为了能体现本次性能差距，选用了3款机器进行测试帧生成时间（SOC由于发热等因素可能是一个区间）：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;" powered-by="xiumi.us"><p><br></p><table resolved=""><colgroup><col><col><col><col></colgroup><tbody><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;background-color: rgb(255, 254, 213);"><p><strong><span style="font-size: 14px;">机型 (处理器)</span></strong></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;background-color: rgb(255, 254, 213);"><p><strong><span style="font-size: 14px;">ThreeJS PBR</span></strong></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;background-color: rgb(255, 254, 213);"><p><strong><span style="font-size: 14px;">优化 PBR</span></strong></p></td><td colspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;background-color: rgb(255, 254, 213);"><strong><span style="font-size: 14px;">提升比例</span></strong></td></tr><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">iPhone 6 (A8)</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">20-22ms</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">&lt;16ms</span></p></td><td colspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><span style="font-size: 14px;">20-33%</span></td></tr><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">Redmi 6 Pro (骁龙625)</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">52ms</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">32ms</span></p></td><td colspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><span style="font-size: 14px;">62%</span></td></tr><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">华为 P20 (麒麟970)</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">10ms</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">7-8ms</span></p></td><td colspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;word-break: break-all;"><span style="font-size: 14px;">25-42%</span></td></tr></tbody></table></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">较好的机器在该场景下通常能跑上百帧，两者差距相对较小，这里就不一一列举。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>皮肤优化</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">为了营造皮肤的通透感，我们调研了市面上主流的皮肤渲染方案，例如屏幕空间次表面散射（Screen Space Subsurface Scattering Skin Rendering）、可分离次表面散射（Separable Subsurface Scattering）、预积分次表面散射（Pre-Integrated Skin Shading）</p><p style="word-break: break-all;white-space: normal;">以上方案除了预积分次表面散射，其它两种方案都要使用实时卷积模糊，开销非常高。而预积分次表面散射方案，根据SIGGRAPH 2011 Pre-integrated Skin Shading的分享，在完成LUT贴图和曲率贴图烘培的情况下，仅使用两次贴图采样即可模拟较好的次表面散射效果。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014738" data-ratio="0.5554123711340206" data-s="300,640" data-type="png" data-w="776" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnkOMmViawtehiaVsauUJTibwCI0RDdztKicfibzLq2BvNsvI1m6QbZQcibFfw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>LUT贴图烘培</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014735" data-ratio="0.5570117955439057" data-s="300,640" data-type="png" data-w="763" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqn3YuBOdE2icYGiby1gwSXXwNPxSPKLl9Licnj1x8EyaBb7h1exsNQExAvw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>曲率贴图烘培</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">考虑到移动端性能和效果平衡取舍，所以采用了预积分次表面散射的方案：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014739" data-ratio="0.36983471074380164" data-s="300,640" data-type="png" data-w="484" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnhWLzN5RMTR53lJwIyJwnafWkxB79aC9ic2QCNcAASOkC5BmI2nMrWpA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014736" data-ratio="0.6387096774193548" data-s="300,640" data-type="png" data-w="620" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqn995jHicNuXyyBwTdUr18JicNHQpbw0licYibgHISFibfx1zxUQwe4F2nianA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：未开启SSS &nbsp;&nbsp; &nbsp; &nbsp;右：开启SSS</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>瞳孔优化</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">眼睛渲染一大难点是模拟瞳孔的一个自然的凹陷，如果没有处理好，从角色侧面观察瞳孔会突出，角色将失去神采。</p><p style="word-break: break-all;white-space: normal;">瞳孔处理通常有两种方法，一种是将瞳孔和眼角膜分开建模，瞳孔向下凹陷，另一种做法是用视差方法模拟瞳孔凹陷。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014737" data-ratio="1.0880829015544042" data-s="300,640" data-type="png" data-w="386" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnAJia5AChMV4PAovNIH9UF9J3uNibac9QhMXb5P7bjfibEGlkjLnvsibaoQ/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>Tda式初音ミク・アペンドVer1.10</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">考虑到美术制作流程上的复杂度，我们选用了后者，需要把眼球的前向量传递给Shader，然后把视线转换到切线空间对贴图进行采样，最后应用一张Mask贴图决定整个瞳孔的凹陷程度。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014743" data-ratio="0.5683060109289617" data-s="300,640" data-type="png" data-w="732" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnUyq3GcTPIgyvVxM0EBCXFPW0cI6lup9wgtonPyOcnbuwQUg2VNIagA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：未开启瞳孔优化&nbsp; &nbsp; &nbsp; &nbsp; 右：开启瞳孔优化</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>渲染管线设计</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们遇到一些移动设备高分屏的问题，在IPhone13Pro上，内部分辨率高达1170×1992，根据我们的经验，这会造成手机发热与性能问题。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014741" data-ratio="0.909556313993174" data-s="300,640" data-type="png" data-w="586" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnl6WJZicw2T5hMD2gI2UicWqaFb4O4AHno7xDhqpM81WK2LXpvpCL504Q/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">为了解决上述问题我们设计了一套离屏渲染管线，使用Threejs的EffectComposer申请了与屏幕分辨率不同的RenderTarget，并且在RenderScale=0.5的情况下，在大部分高分屏手机上取得了还不错的效果，兼顾了效果与性能。</p><p style="word-break: break-all;white-space: normal;">具体管线如下：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014740" data-ratio="0.38796296296296295" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqntImnia2rTOfzyGibqNLEvPkTIE1SDRLQ70SZA1xvBjpMH4OQjkNuxbAA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">与Three.JS默认直接画到画布上的管线做对比，我们的方案实现的功能更复杂，由于可以控制离屏渲染分辨率，性能与质量之间可配置的灵活度也更高。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>抗锯齿</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">Three.JS支持硬件抗锯齿MSAA和屏幕空间抗锯齿SMAA，在最开始我们觉得这两种抗锯齿是够用的，但随着美术需求逐渐复杂，我们发现上述两种抗锯齿对于一些边缘光照产生的高频像素无能为力，并且在实现头发等效果时，发现MSAA仅对几何走样（Geometry Aliasing）有较好的效果，但对着色走样（Shading Aliasing）基本无效。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014744" data-ratio="0.5555555555555556" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnocf963l3QtEiaDeial689qeCQsaJQQaOuF3gmgUPXGMChiaE2Ef6eHnbg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">MSAA着色走样</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">我们尝试使用SMAA解决，但最终结果仍不理想。根据经验，着色走样需使用超采样（Super-Sampling）抗锯齿解决，但这样无疑又增加了渲染像素，导致性能问题。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">有没有即不需要超采样，又可以解决着色走样的抗锯齿技术呢？答案是有的，我们采用时域抗锯齿（Temporal Anti-Aliasing），接下来简称为TAA。</p><p style="word-break: break-all;white-space: normal;">在实践中发现，Three.JS上并没有直接可用的TAA，官方内置的TAA本质是个超采样，这并不符合我们的预期。根据上述背景，我们决定从零开发TAA。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>摄影机抖动</strong></p><p style="word-break: break-all;white-space: normal;">TAA的核心思想是将多次采样的过程分布到每一帧当中，这里我们除了空间上均匀分布，还希望能在时间上均匀分布。这里根据SIGGRAPH2014 Unreal Engine 4 TAA的分享，我们使用低差异序列Halton(2, 3)作为子像素抖动偏移：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014742" data-ratio="0.4396825396825397" data-s="300,640" data-type="png" data-w="630" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqn2yUcK2FylotibNaCYkZF4JtLzsykJl7La114XoR3sHV1Nk4gWxgibYcQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">然后我们将这个抖动（Jitter）偏移调整到摄影机的投影矩阵上：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014746" data-ratio="0.08686440677966102" data-s="300,640" data-type="png" data-w="472" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnzYd6jfuaH6zyiaT9GyZttsSGXMuCRmibon9jQmOX8ricLMa5a8O5weXPA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>运动向量</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">尽管我们将采样分布到了每一帧上，但是保存多帧对于移动平台来说是不实际的，这时我们需要简化为只保存两帧，当前帧和历史帧。我们通过指数混合的方式将当前帧和历史帧进行不断累积。如果我们只是简单的将当前帧和历史帧混合，一旦摄影机或物体发生运动就会出现残影问题，我们还需要知道当前像素在上一帧所处的位置，这个过程称为重投影（Reprojection），我们使用运动向量（Motion Vector）重建上一帧当前像素的位置。</p><p style="word-break: break-all;white-space: normal;">渲染运动向量：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014745" data-ratio="0.12375249500998003" data-s="300,640" data-type="png" data-w="501" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnSjDVYzpNdIcOY5uBYIxj9CZLjFDBb0jzgdetJchNuVhgm8nskz5sUQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">这里需要注意的是，计算上一帧裁剪空间（Clip Space）位置时我们除了要传递上一帧的MVP矩阵给Shader外，我们还需要将上一帧的蒙皮骨骼矩阵一并上传（Three.JS使用的是GPU蒙皮）。为了节省性能，运动向量的RT我们使用了RGBA8格式，在输出时，还需要将两个Float打包进RGBA8中，在使用运动向量时，我们还需要进行相应的Unpack操作。</p><p style="word-break: break-all;white-space: normal;">当然，在移动端渲染运动向量需要将场景中物体再次渲染一遍，这样开销在低端机上依然无法接受，所以在低端机上我们使用深度图进行位置重建：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014747" data-ratio="0.2608695652173913" data-s="300,640" data-type="png" data-w="529" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnFMJZ4xIWybuoksjjhiaDSIMq2cKB5icr6VvL5LuFPsKgcnliafiaib9O6Iw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">具体思路是用逆VP矩阵将位置转换到世界空间，然后再算出上一帧的位置。当然这个方法的缺点是无法重建蒙皮动画的运动。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>计算颜色包围盒</strong></p><p style="word-break: break-all;white-space: normal;">尽管进行了上述操作后，残影问题解决了一大部分，但是我们发现在平移物体的时候，依然会在背景上出现大量的鬼影（Ghosting）。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014749" data-ratio="0.838006230529595" data-s="300,640" data-type="png" data-w="642" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnia5CcleQW2blyOvU4v0egTwNmKHjnvtx0cTIia94FgJ6scXucNtJMORA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">这是由于当前像素在上一帧并没有出现（被遮挡），在速度向量上也不会有记录。这里我们的解决办法是计算当前帧像素周围8个采样点的颜色，计算出最大最小颜色，形成一个颜色包围盒。我们还可以在YCoCg空间中获得更加精确的结果。然后我们就可以将历史帧的颜色限制在这个颜色包围盒范围之内。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>方差裁剪</strong></p><p style="word-break: break-all;white-space: normal;">在高端设备或PC平台上，我们还参考了Nvidia GDC 2016上提出的方差裁剪（Variance Clipping）</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014748" data-ratio="0.632295719844358" data-s="300,640" data-type="png" data-w="514" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnq6PTwmVQSYgpOmX4rBtx64hqsn02I47mZ9exc6fj1Hgxy0TYsFYKUA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">这里我们的gamma值取2将会获得一个比较稳定的结果。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014750" data-ratio="0.38482384823848237" data-s="300,640" data-type="png" data-w="369" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqngWy21MDNHQmmp1uMXv2fuJ4Mib77w6K2beM0aoJeicLufY886p4TJfXg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：gamma 1.0&nbsp; &nbsp; &nbsp; &nbsp; 右：gamma 2.0</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>深度扩张</strong></p><p style="word-break: break-all;white-space: normal;">到目前为止，我们已经得到了比较好的效果，但我们移动摄影机会发现，物体边缘会有锯齿。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014752" data-ratio="0.8505434782608695" data-s="300,640" data-type="png" data-w="368" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnpQzNTgxOp21ayGMVTtKwd6LCLh8LeiaReMaQcyFN00MWtY1BlPcrWwQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">这里我们需要对当前像素的深度周围8个像素进行采样，得到一个最小值（离摄影机最近），然后得到该采样点的纹理坐标偏移。然后对速度向量采样时，应用这个偏移。这样相当于对速度向量离摄影机最近的部分进行扩张，这样就解决了物体边缘锯齿的问题。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>抗闪烁</strong></p><p style="word-break: break-all;white-space: normal;">最后一个问题，也是最难解决的问题，就是TAA抖动的时候，造成一些像素当前帧被光栅化了，但到了下一帧又消失了，这就导致之前计算颜色包围盒时，历史帧的颜色与当前帧色彩差距过大，被裁剪掉了，这时就会出现非常明显的闪烁问题。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img data-imgfileid="100014754" data-ratio="1" data-s="300,640" data-type="gif" data-w="128" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_gif/1BMf5Ir754QsoomDywL7COia5PI9QdJqnKsdJd04vyxpygcOquRSoOCxOxrFCuJ013aibMOee9NkxMOZXlQ0acLg/640?wx_fmt=gif&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">这里我们的解决办法是再多申请一张RT，记录上一帧的颜色，然后根据速度向量的差值混合当前帧和上一帧颜色。这个方法初衷是使用两帧颜色，尽可能还原更多高频信息。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014753" data-ratio="0.5" data-s="300,640" data-type="png" data-w="744" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnPOoZLLiaSpoE2nkd1QEB9r3H9UrGItdbaMceJQsyBvl4dXwuzwBnB2g/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：单帧&nbsp; &nbsp; &nbsp; &nbsp; 右：2帧混合</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014751" data-ratio="0.7857142857142857" data-s="300,640" data-type="png" data-w="420" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnw7ezhBrChFSvvq64G1vnOvESBBgXZ6ibDwicaiay460qQz9MD83J0G0EQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们可以观察到头发丝的结果也更加稳定，改善了发丝断断续续的情况。虽然目前画面仍有一些闪烁问题，但已经可以被接受。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014757" data-ratio="0.33376792698826596" data-s="300,640" data-type="png" data-w="767" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnLNe7VIwP9ybqgqnatk5sWh4WHwR99iatau7X9X5fFwZhJFHhzvrftwg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：TAA &nbsp;&nbsp; &nbsp; &nbsp; 中：MSAA &nbsp;&nbsp; &nbsp; &nbsp; 右：SMAA</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>抖动半透明</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">半透明渲染一直是光栅化渲染中的难题，纯半透明渲染又和渲染顺序息息相关，要解决顺序问题，我们可以在美术资产制作的时候严格按照顺序进行分组与拆分，但这样无疑对美术制作负担过重。如果我们使用类似深度剥离、权重混合等OIT技术，作为移动平台开销又太高了。至于像链表OIT WebGL不支持，我们即希望开销足够低，又可以无视排序问题，还可以获得不错的半透明效果，那有没有这样的解决方案呢？答案是有的：抖动半透明（Dithering Transparency）。值得一提的是，目前市面大多数3A游戏也在使用这个技术。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014758" data-ratio="1.0790273556231003" data-s="300,640" data-type="png" data-w="329" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnzibUFFRhWqaAeGfZFDaBVgMpumnSuPPqj5FTbh2Eegpb1uBZCsqwenw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">但请注意，这个技术需要配合TAA一起使用，如果单纯使用抖动技术并不能获得很好的效果。</p><p style="word-break: break-all;white-space: normal;">此外关于抖动的pattern，规则抖动可以获得较平滑的结果，但是由于其原理没法保留背后的半透明信息，相当于覆盖掉了。我们的解决办法是在规则抖动中加入一些随机抖动：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014759" data-ratio="0.38796296296296295" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnbJzNbtu3RibwvCKY0yicGXOzFyhGkUQp9KMN6G7wGR05zWaocQDOEI1w/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：半透明裁剪&nbsp; &nbsp; &nbsp; &nbsp; 中：规则抖动&nbsp; &nbsp; &nbsp; &nbsp; 右：规则抖动+随机抖动</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>软阴影</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">一个好的阴影效果，将会大大提升画面的真实度，Three.JS内置4种阴影类型：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014755" data-ratio="0.23394495412844038" data-s="300,640" data-type="png" data-w="654" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnmSqK9cf52FA3a6vSqyNLjyO9qEGjViaVgOAd7jTzticgoBLISUjygONg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">未过滤，锯齿感严重，无法使用</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">PCF相比上面多了几次采样，但依然有锯齿感</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">VSM对于平面投影效果非常不错，但是对于复杂曲面物体，瑕疵较多</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">PCF Soft虽然消除了锯齿感，但是半影范围无法调整</p></li></ol><p style="word-break: break-all;white-space: normal;">综上所述Three.JS内置的阴影均不符合预期效果，我们的诉求是不要有明显锯齿感，且可以有较大的半影范围。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>泊松分布</strong></p><p style="word-break: break-all;white-space: normal;">我们使用泊松盘（Poisson Disc）对阴影贴图进行采样，并且每次会随机旋转一个角度，来消除规则pattern。最后我们配合TAA消除噪点：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014756" data-ratio="0.51" data-s="300,640" data-type="png" data-w="300" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnd11c82nl1dzdp6f3JdZlczMk4q7ibFPpKD0FwIIYTsWQccxXjcQtGhw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>左：旋转泊松盘&nbsp; &nbsp; &nbsp; &nbsp; 右：泊松盘+TAA</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>泛光</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">一般来说我们的显示设备通常不支持HDR（高动态范围），于是我们需要模拟光线在薄膜中的次表面散射（胶片、镜头滤光片、视网膜等）。在PBR管线下，镜面反射的动态范围通常非常高，此技术可以帮助物体表现相对亮度，或给LDR图像添加真实感。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014762" data-ratio="0.34942084942084944" data-s="300,640" data-type="png" data-w="518" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqn1icCuoibD5I7GWxVsTsHzRyDYg883N4rbLkD3fWngbglcfo5PBPEnKRQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">Three.JS中包含多个内置的Bloom、Glow效果，但效果往往是一种简单的模糊，不符合我们对高动态范围亮度泛光效果的预期。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>基于物理的泛光</strong></p><p style="word-break: break-all;white-space: normal;">（Physically Based Bloom）流程如下：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014764" data-ratio="1.0805555555555555" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnuFOxUKQJHLabeuhwXvmjxoTIe6LZvOtujplk9Bib29cLsLKdlHQuPOA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">首先对原画面图做一个阈值处理，过滤出亮度超过阈值的颜色，然后对这个颜色进行降采样并进行模糊，每次下采样的纹理尺寸将是之前的一半，一般我们迭代7-8次，由于迭代次数越多，最终Bloom能溢出的范围将越大。达到最低的mip等级后，我们就可以进行上采用，这里需要注意，所有mip等级都需要持久保存，将当前等级和前一级模糊的图像进行混合，混合因子也决定了溢出范围。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>泛光透明穿透</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">完成上采样以后，最后一步是和原图颜色混合，一般来说在Linear色彩空间下使用加法即可。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">由于我们的项目还需要透明背景，仅仅对Alpha通道进行模糊处理依然会有光晕黑边问题。</p><p style="word-break: break-all;white-space: normal;">这里我们将最终Bloom颜色转换到HSV色彩空间，将V值保存为Alpha，然后将V值设为1。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014763" data-ratio="1.0382022471910113" data-s="300,640" data-type="png" data-w="445" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QsoomDywL7COia5PI9QdJqnpXXb7CL9TeDfedmFXFN27mnjAss0PvCLk8tAIBUFemichBj2fU6ArDA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>总结</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">通过上述的技术方案重构和优化，我们在Web上实现了符合预期的3D数字人渲染效果。横向对比头部的移动端数字人竞品，在CG和仿真风格领域，我们具备较大的竞争优势，特别是在人物关键特征的还原和光影效果的复现上。在未来的迭代中，我们将继续在捏脸换装，人物面部/身体动画，互动特效方向上继续深耕效果优化，打造更具行业竞争力的数字人个性化动态渲染解决方案。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>参考文献</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">Zioma, R. (2015). Optimizing PBR [PowerPoint slides].&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf</em></span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">Jimenez, J., &amp; von der Pahlen, J. (2013). Next Generation Character Rendering [PowerPoint slides].&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>http://www.iryoku.com/stare-into-the-future</em></span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">Penner, E. (2011). Pre-Integrated Skin Shading [PowerPoint slides].&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>http://advances.realtimerendering.com/s2011/Penner%20-%20Pre-Integrated%20Skin%20Rendering%20(Siggraph%202011%20Advances%20in%20Real-Time%20Rendering%20Course).pptx</em></span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">Karis, B. (2014). High Quality Temporal Supersampling [PowerPoint slides].&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://de45xmedrsdbp.cloudfront.net/Resources/files/TemporalAA_small-59732822.pdf</em></span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">OpenGL Tutorial. Tutorial 16 : Shadow mapping.&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/#stratified-poisson-sampling</em></span></p><p style="word-break: break-all;white-space: normal;">Christensen, A. P. (2022). Physically Based Bloom.&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom</em></span></p><p style="word-break: break-all;white-space: normal;"><span style="text-decoration: underline;color: rgb(12, 182, 242);"><em><br></em></span></p></div><div style="text-align: center;justify-content: center;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>你知道在风格化渲染上还有哪些技巧吗？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>哔哩哔哩双层六芒星玻璃杯1个</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>2月27日中午12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014760" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="800" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QsoomDywL7COia5PI9QdJqnsicE9p87BuaS7wW8asw0rOZMT9xb8JfcPQKD12DcJwl983mDhefyQFA/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;justify-content: center;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247495537&amp;idx=1&amp;sn=0315691622577924f9f4e28929cad16a&amp;chksm=cf2f2a54f858a342520cb94e03f5de2ca07c14cc17c8809f8a4912bf6f9aca9f680b25328ee3&amp;scene=21#wechat_redirect" textvalue="B站幻星数字人3D渲染技术揭秘" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站幻星数字人3D渲染技术揭秘</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247495403&amp;idx=1&amp;sn=6a0197dadd8f8a4a6d4efcd85018287c&amp;chksm=cf2f2bcef858a2d8d8266faba7fc458f996442f2f2525270015ed81369a7be242dd891b94195&amp;scene=21#wechat_redirect" textvalue="B站虚拟人与动作捕捉技术" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站虚拟人与动作捕捉技术</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247494394&amp;idx=1&amp;sn=e82b908c3e3f4c954b611bbd7c32e334&amp;chksm=cf2f2fdff858a6c995323554c8151575ee767bea54d54818bab969fd366a438ee4a16be5c459&amp;scene=21#wechat_redirect" textvalue="浏览器渲染原理与弹幕" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">浏览器渲染原理与弹幕</a></p></li></ul></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;font-size: 13px;letter-spacing: 4px;" powered-by="xiumi.us"><p><a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=3289447926347317252#wechat_redirect" textvalue="通用工程" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">通用工程</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2390333109742534656#wechat_redirect" textvalue="大前端" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">大前端</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=3297757408550699008#wechat_redirect" textvalue="业务线" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">业务线</span></a><br></p><p><a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2329861166598127619#wechat_redirect" textvalue="大数据" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">大数据</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2782124818895699969#wechat_redirect" textvalue="AI" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">AI</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2532608330440081409#wechat_redirect" textvalue="多媒体" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">多媒体</span></a></p><p><br></p></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p></div><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>万成</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[精心设计的 DNS Failover 策略在 Go 中竟然带来了反效果，发生了什么？]]></title>
        <id>2247498366_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498366&amp;idx=1&amp;sn=6524781738ad6352aa85d46286872c3a&amp;chksm=cf2f3f5bf858b64d28600e9f31166de0427f7d3d47ee7ff04cc745ded45f9ea1910043e7e784#rd"/>
        <updated>2024-02-19T13:00:51.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 0% 45.9532%;background-repeat: no-repeat;background-size: 100%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RFIjDhHyCfk6jU6tYC7ggj9ibsr8ZO7F5hXTHwKoJMWNPdopWIibiaJ2xjxjOXQfwZeGMFFdWIkEbfw/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014714" data-ratio="1.5148148148148148" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RFIjDhHyCfk6jU6tYC7ggj9ibsr8ZO7F5hXTHwKoJMWNPdopWIibiaJ2xjxjOXQfwZeGMFFdWIkEbfw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>卫智雄</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩高级运维工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>一. 背景</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">如下配置所示，我们在 /etc/resolv.conf 中配置了两个 nameserver，其中 server2 在灾备机房 ，作为一种 failover 策略。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">nameserver server1</span></code><br><code><span class="code-snippet_outer">nameserver server2</span></code><br><code><span class="code-snippet_outer">options timeout:<span class="code-snippet__number">1</span> attempts:<span class="code-snippet__number">1</span></span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">我们的预期是如果 server1 服务正常，则所有的 DNS 请求应该由 server1 处理，且 server2 故障不应对业务有任何影响 。只有当 server1 服务异常，DNS 请求才应该重试到 server2。</p><p style="word-break: break-all;white-space: normal;">然而我们在线上观察到一直有 AAAA 类型的 DNS 请求发送到 server2，而且如果 client 到 server2 的网络异常时，业务的 http 请求耗时会增加 1s，这并不符合预期。同时因为我们的内网域名都没有 AAAA 记录，且内网服务器也是关闭了 IPv6 协议的，AAAA 请求也不符合预期。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>二. 问题排查</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">经过和业务同学求证，相关程序语言为 Go ，请求使用的是 Go 原生 net 库。在 Go net 库中，最经常使用的方式如下：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">package main</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__title">import</span> <span class="code-snippet__params">(</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"net"</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"net/http"</span></span></code><br><code><span class="code-snippet_outer">)</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet_outer">func <span class="code-snippet__title">main</span><span class="code-snippet__params">()</span> </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;http.Get(<span class="code-snippet__string">"https://internal.domain.name"</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;net.Dial(<span class="code-snippet__string">"tcp"</span>, <span class="code-snippet__string">"internal.domain.name:443"</span>)</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>1. 梳理源码</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">让我们顺着源码分析 net 库的解析逻辑。无论是 http.Get 还是 net.Dial 最终都会到 <span style="color: rgb(255, 102, 149);">func (d *Dialer) DialContext() </span>这个方法。然后层层调用到 <span style="color: rgb(255, 102, 149);">func (r *Resolver) lookupIP() </span>方法，这里定义了何时使用 Go 内置解析器或调用操作系统 C lib 库提供的解析方法，以及&nbsp;/etc/hosts&nbsp;的优先级。</p><p style="word-break: break-all;white-space: normal;">同时补充一个比较重要的信息：windows&nbsp;、darwin(MacOS等)优先使用 C lib 库解析，debug 时需要注意。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">func (d *Dialer) DialContext(ctx context.Context, network, address <span class="code-snippet__built_in">string</span>) (Conn, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;addrs, err := d.resolver().resolveAddrList(resolveCtx, <span class="code-snippet__string">"dial"</span>, network, address, d.LocalAddr)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer">}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer">func (r *Resolver) resolveAddrList(ctx context.Context, op, network, addr <span class="code-snippet__built_in">string</span>, hint Addr) (addrList, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;addrs, err := r.internetAddrList(ctx, afnet, addr)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer">}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer">func (r *Resolver) internetAddrList(ctx context.Context, net, addr <span class="code-snippet__built_in">string</span>) (addrList, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;ips, err := r.lookupIPAddr(ctx, net, host)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer">}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer">func (r *Resolver) lookupIPAddr(ctx context.Context, network, host <span class="code-snippet__built_in">string</span>) ([]IPAddr, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;resolverFunc := r.lookupIP</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;ch := r.getLookupGroup().DoChan(lookupKey, func() (any, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> testHookLookupIP(lookupGroupCtx, resolverFunc, network, host)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;})</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer">}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer">func (r *Resolver) lookupIP(ctx context.Context, network, host <span class="code-snippet__built_in">string</span>) (addrs []IPAddr, err error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> r.preferGo() {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> r.goLookupIP(ctx, network, host)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;order, conf := systemConf().hostLookupOrder(r, host)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> order == hostLookupCgo {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> cgoLookupIP(ctx, network, host)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;ips, _, err := r.goLookupIPCNAMEOrder(ctx, network, host, order, conf)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> ips, err</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们线上的操作系统是 Debain，确认会使用 Go 内置解析器。所以下一步来到了&nbsp;<span style="color: rgb(255, 102, 149);">func (r *Resolver)&nbsp;goLookupIPCNAMEOrder()&nbsp;</span>方法。这里我们可以通过 qtypes 看到如果&nbsp;<span style="color: rgb(255, 102, 149);">net.Dial</span>&nbsp;的&nbsp;<span style="color: rgb(255, 102, 149);">network&nbsp;</span>参数传入的是&nbsp;<span style="color: rgb(255, 102, 149);">tcp&nbsp;</span>，域名的 A 和 AAAA 记录都会被查询，无论服务器是否关闭 ipv6。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">func (r *Resolver) goLookupIPCNAMEOrder(ctx context.Context, network, name <span class="code-snippet__built_in">string</span>, order hostLookupOrder, conf *dnsConfig) (addrs []IPAddr, cname dnsmessage.Name, err error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;lane := make(chan result, <span class="code-snippet__number">1</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;qtypes := []dnsmessage.Type{dnsmessage.TypeA, dnsmessage.TypeAAAA}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">switch</span> ipVersion(network) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">case</span> <span class="code-snippet__string">'4'</span>:</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;qtypes = []dnsmessage.Type{dnsmessage.TypeA}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">case</span> <span class="code-snippet__string">'6'</span>:</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;qtypes = []dnsmessage.Type{dnsmessage.TypeAAAA}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;var queryFn func(fqdn <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;var responseFn func(fqdn <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type) result</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> conf.singleRequest {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;queryFn = func(fqdn <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type) {}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;responseFn = func(fqdn <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type) result {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dnsWaitGroup.Add(<span class="code-snippet__number">1</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;defer dnsWaitGroup.Done()</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p, server, err := r.tryOneName(ctx, conf, fqdn, qtype)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> result{p, server, err}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;} <span class="code-snippet__keyword">else</span> {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;queryFn = func(fqdn <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dnsWaitGroup.Add(<span class="code-snippet__number">1</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;go func(qtype dnsmessage.Type) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p, server, err := r.tryOneName(ctx, conf, fqdn, qtype)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lane &lt;- result{p, server, err}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dnsWaitGroup.Done()</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}(qtype)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;responseFn = func(fqdn <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type) result {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> &lt;-lane</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">for</span> _, fqdn := range conf.nameList(name) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">for</span> _, qtype := range qtypes {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;queryFn(fqdn, qtype)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">for</span> _, qtype := range qtypes {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;result := responseFn(fqdn, qtype)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">从&nbsp;<span style="color: rgb(255, 102, 149);">goLookupIPCNAMEOrder&nbsp;</span>方法中我们可以看到由&nbsp;<span style="color: rgb(255, 102, 149);">tryOneName</span>&nbsp;方法分别处理 A 和 AAAA 记录。深入&nbsp;<span style="color: rgb(255, 102, 149);">tryOneName&nbsp;</span>内部，我们终于发现具体的 nameserver 选择逻辑，在某些错误情况下会重试请求到下一个 nameserver。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">func (r *Resolver) tryOneName(ctx context.Context, cfg *dnsConfig, name <span class="code-snippet__built_in">string</span>, qtype dnsmessage.Type) (dnsmessage.Parser, <span class="code-snippet__built_in">string</span>, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;q := dnsmessage.Question{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;Name: &nbsp;n,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;Type: &nbsp;qtype,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;Class: dnsmessage.ClassINET,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">for</span> i := <span class="code-snippet__number">0</span>; i &lt; cfg.attempts; i++ {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">for</span> j := uint32(<span class="code-snippet__number">0</span>); j &lt; sLen; j++ {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;server := cfg.servers[(serverOffset+j)%sLen]</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;p, h, err := r.exchange(ctx, server, q, cfg.timeout, cfg.useTCP, cfg.trustAD)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> err := checkHeader(&amp;p, h); err != nil {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dnsErr := &amp;DNSError{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Err: &nbsp; &nbsp;err.Error(),</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Name: &nbsp; name,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Server: server,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> err == errServerTemporarilyMisbehaving {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dnsErr.IsTemporary = <span class="code-snippet__literal">true</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> err == errNoSuchHost {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__comment">// The name does not exist, so trying</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__comment">// another server won't help.</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dnsErr.IsNotFound = <span class="code-snippet__literal">true</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> p, server, dnsErr</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lastErr = dnsErr</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">continue</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;2. 线上 debug</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">接下来我们可以构造一个简单的程序在线上 debug，看看到底是因为原因导致 AAAA 请求重试到了下一个 nameserver。(tips: debug 需要把 resolv.conf 的 timeout 调长一些)</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">package main</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__title">import</span> <span class="code-snippet__params">(</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"net"</span></span></code><br><code><span class="code-snippet_outer">)</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet_outer">func <span class="code-snippet__title">main</span><span class="code-snippet__params">()</span> </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;c, err := net.Dial(<span class="code-snippet__string">"tcp"</span>, <span class="code-snippet__string">"internal.domain.name:80"</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> err != nil {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;_ = c.Close()</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">dlv debug main.go</span></code><br><code><span class="code-snippet_outer">(dlv) <span class="code-snippet__keyword">break</span> /usr/local/go/src/net/dnsclient_unix.go:<span class="code-snippet__number">279</span></span></code><br><code><span class="code-snippet_outer">(dlv) <span class="code-snippet__keyword">break</span> /usr/local/go/src/net/dnsclient_unix.go:<span class="code-snippet__number">297</span></span></code><br><code><span class="code-snippet_outer">(dlv) <span class="code-snippet__keyword">continue</span></span></code><br><code><span class="code-snippet_outer">(dlv) <span class="code-snippet__function">print err</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet_outer"><span class="code-snippet__title">error</span><span class="code-snippet__params">(*errors.errorString)</span> *</span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;s: <span class="code-snippet__string">"lame referral"</span>,}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">通过 debug 我们最终定位到 err 由下面这段代码抛出。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">func <span class="code-snippet__title">checkHeader</span><span class="code-snippet__params">(p *dnsmessage.Parser, h dnsmessage.Header)</span> error </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// libresolv continues to the next server when it receives</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// an invalid referral response. See golang.org/issue/15434.</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> h.RCode == dnsmessage.RCodeSuccess &amp;&amp; !h.Authoritative &amp;&amp; !h.RecursionAvailable &amp;&amp; err == dnsmessage.ErrSectionDone {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> errLameReferral</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;....</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">原来如果返回的 DNS response 以下4个条件全部满足，就会触发重试逻辑：</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">响应没有错误</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">应答 Server 不是权威服务器</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">应答 Server 不支持递归请求</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">应答的&nbsp;records&nbsp;为空</p></li></ol><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">这里有一个疑点是我们的 DNS Server 是支持递归请求的，经过排查，我们发现是因为在 DNS Server 有一层 NetScaler 作为负载均衡器，负载均衡是以 DNS proxy server 的方式运行，默认并没有开启对递归请求的支持。</p><p style="word-break: break-all;white-space: normal;">我们可以运行 dig 命令观察是否有如下输出来判断 server 是否支持递归请求。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">;; WARNING: recursion requested but <span class="code-snippet__keyword">not</span> available</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>3. 原因梳理</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">至此，我们已经弄清楚了为什么会有 AAAA 类型的请求发送到 nameserver2。而文章开头提到的业务 http 请求耗时增加 1s 的原因则是因为 client 到 server2 网络异常时，需要等待重试的 AAAA 请求超时，才会返回解析结果。</p><p style="word-break: break-all;white-space: normal;">还有一个问题困扰着我们，为什么用 ping 等程序验证，并没有发现类似的问题。我们通过直接用 C getaddrinfo 函数测试，以及通过 -tags 'netcgo' 编译相同的 go 程序验证，发现在 A 记录有值的情况下，AAAA 请求都不会重试到下一个 nameserver。回到 Go 中触发重试的这段代码深入分析，注释中可以看到由&nbsp;golang.org/issue/15434&nbsp;引入，提交代码的作者是为了解决 issue 中的问题复制了 libresolv 的行为。然而翻阅 glibc 的代码可以看到 next_ns 中还有这样一段逻辑：只要 A 或者 AAAA 任意一个有记录值，都不会重试到下一个 nameserver。这段逻辑并没有引入 Go 中。所以我们需要注意 Go 内置解析器与 glibc 中的行为和结果都有差异，它可能会影响到我们的服务。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">next_ns:</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> (recvresp1 || (buf2 != <span class="code-snippet__literal">NULL</span> &amp;&amp; recvresp2)) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;*resplen2 = <span class="code-snippet__number">0</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> resplen;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer">...</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__keyword">if</span> (anhp-&gt;rcode == NOERROR &amp;&amp; anhp-&gt;ancount == <span class="code-snippet__number">0</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;&amp;&amp; anhp-&gt;aa == <span class="code-snippet__number">0</span> &amp;&amp; anhp-&gt;ra == <span class="code-snippet__number">0</span> &amp;&amp; anhp-&gt;arcount == <span class="code-snippet__number">0</span>) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">goto</span> next_ns;</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>三. 优化</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">经过上面的排查，我们已经确认了 AAAA 请求的源头，以及为什么会重试到下一个 server。接下来可以针对性的优化。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.&nbsp; 对于 Go 程序中 AAAA 请求重试到下一个 server 的优化方案：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">&nbsp; a. 代价相对较小的方案，程序构建时添加&nbsp;-tags 'netcgo' 编译参数，指定使用 cgo-based 解析器。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">&nbsp; b. DNS Server proxy 层支持递归请求。这里有必要说明递归支持不能在 proxy 层简单的直接开启，proxy 和 recursion 在逻辑上有冲突的地方，务必做好必要的验证和确认，否则可能会带来新的问题。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2. 如果业务程序不需要支持 IPv6 网络，可以通过指定网络类型为 IPv4，来消除 AAAA 请求，同时避免随之带来的问题。（也顺带减少了相关开销）</p><p style="word-break: break-all;white-space: normal;">&nbsp; &nbsp;a.&nbsp;<span style="color: rgb(255, 102, 149);">net.Dial</span>&nbsp;相关方法可以指定&nbsp;<span style="color: rgb(255, 102, 149);">network&nbsp;</span>为&nbsp;<span style="color: rgb(255, 102, 149);">tcp4</span>、<span style="color: rgb(255, 102, 149);">udp4</span>&nbsp;来强制使用 IPv4</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">net.Dial(<span class="code-snippet__string">"tcp4"</span>, <span class="code-snippet__string">"internal.domain.name:443"</span>)</span></code><br><code><span class="code-snippet_outer">net.Dial(<span class="code-snippet__string">"udp4"</span>, <span class="code-snippet__string">"internal.domain.name:443"</span>)</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">&nbsp; b.&nbsp;<span style="color: rgb(255, 102, 149);">net/http&nbsp;</span>相关方法可以通过如下示例来强制使用 IPv4</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">package main</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__title">import</span> <span class="code-snippet__params">(</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"context"</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"log"</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"net"</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"net/http"</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__string">"time"</span></span></code><br><code><span class="code-snippet_outer">)</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet_outer">func <span class="code-snippet__title">main</span><span class="code-snippet__params">()</span> </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;dialer := &amp;net.Dialer{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;Timeout: &nbsp; <span class="code-snippet__number">30</span> * time.Second,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;KeepAlive: <span class="code-snippet__number">30</span> * time.Second,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;transport := http.DefaultTransport.(*http.Transport).Clone()</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;transport.DialContext = func(ctx context.Context, network, addr <span class="code-snippet__built_in">string</span>) (net.Conn, error) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> dialer.DialContext(ctx, <span class="code-snippet__string">"tcp4"</span>, addr)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;httpClient := &amp;http.Client{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;Timeout: <span class="code-snippet__number">30</span> * time.Second,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;httpClient.Transport = transport</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;resp, err := httpClient.Get(<span class="code-snippet__string">"https://internal.domain.name"</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> err != nil {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__built_in">log</span>.Fatal(err)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__built_in">log</span>.Println(resp.StatusCode)</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>四. 总结</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">Go net 库中提供了两种解析逻辑：自实现的内置解析器和系统提供的解析函数。windows&nbsp;、darwin(MacOS等)优先使用系统提供的解析函数，常见的 Debain、Centos 等优先使用内置解析器。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">Go net 库中的内置解析器和系统提供的解析函数行为和结果并不完全一致，它可能会影响到我们的服务。</p></li><li><p>业务应设置合理的超时时间，不易过短，以确保基础设施的 failover 策略有足够的响应时间。</p></li></ol></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>推荐阅读：</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://studygolang.com/topics/15021</em></span></p><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(12, 182, 242);"><em><span style="text-decoration: underline;">https://pkg.go.dev/net</span></em></span>&nbsp;中的 Name Resolution 章节</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;justify-content: center;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>你还遇到过哪些域名解析相关的故障？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>哔哩哔哩双层六芒星玻璃杯1个</strong></span>（见下图）。<strong><span style="color: rgb(255, 102, 149);">2月23日中午</span></strong><span style="color: rgb(255, 102, 149);"><strong>12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014712" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="800" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RFIjDhHyCfk6jU6tYC7ggj23dIr7SFjltHpHPsdgCYKJO3Ks9UBico9jQicxncNewuWgTv7um8qAeQ/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;justify-content: center;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247487748&amp;idx=1&amp;sn=c9cbcacf3bba25b478abf2a0f5c0e75f&amp;chksm=cf2cd421f85b5d37adce8fc782151942912bf38a24be2ebd42b000505bcae60a4833d9a230cd&amp;scene=21#wechat_redirect" textvalue="全链路压测改造之全链自动化测试实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">全链路压测改造之全链自动化测试实践</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247493174&amp;idx=1&amp;sn=648bf0ffb5e31b1c211d22e636e2c3df&amp;chksm=cf2f2313f858aa0580dad7ee9b8347739122dcaba50071616e444a73ad28f4c3dcaf62c79f33&amp;scene=21#wechat_redirect" textvalue="哔哩哔哩⼤数据建设之路—实时DQC篇" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">哔哩哔哩⼤数据建设之路—实时DQC篇</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247491092&amp;idx=1&amp;sn=b09492563c760775ed61f75db1bd5822&amp;chksm=cf2cdb31f85b5227b96a3da04fd89153c40635ce4d9ae20cbe9baadc58dbae9e41060d3cd003&amp;scene=21#wechat_redirect" textvalue="Apache Kyuubi 在B站大数据场景下的应用实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">Apache Kyuubi 在B站大数据场景下的应用实践</a></p></li></ul></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;font-size: 13px;letter-spacing: 4px;" powered-by="xiumi.us"><p><a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=3289447926347317252#wechat_redirect" textvalue="通用工程" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">通用工程</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2390333109742534656#wechat_redirect" textvalue="大前端" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">大前端</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=3297757408550699008#wechat_redirect" textvalue="业务线" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">业务线</span></a><br></p><p><a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2329861166598127619#wechat_redirect" textvalue="大数据" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">大数据</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2782124818895699969#wechat_redirect" textvalue="AI" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">AI</span></a>丨<a target="_blank" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;action=getalbum&amp;album_id=2532608330440081409#wechat_redirect" textvalue="多媒体" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2"><span style="color: rgb(12, 182, 242);">多媒体</span></a></p><p><span style="color: rgb(12, 182, 242);"><br></span></p></div></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>卫智雄</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[人身攻击与引战类评论的社区治理（文末抽奖）]]></title>
        <id>2247498359_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498359&amp;idx=1&amp;sn=ffb3e2c4b76266fe2553f1b2cc2d6ae8&amp;chksm=cf2f3f52f858b644b26dac041f7ab4ab1937fb0ff48149ee36b3b9ce0e5c6cc5d1ca81d134ef#rd"/>
        <updated>2024-02-18T03:17:39.000Z</updated>
        <summary type="html"><![CDATA[<div><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 0% 41.0141%;background-repeat: no-repeat;background-size: 100%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd4uUd816iat3TXb6CaX2YjPvoN1659qFslBhB4q7iaV9IfLtdsT7emTrw/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014677" data-ratio="1.2318435754189945" data-s="300,640" data-type="jpeg" data-w="358" style="width: 100%;opacity: 0;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd4uUd816iat3TXb6CaX2YjPvoN1659qFslBhB4q7iaV9IfLtdsT7emTrw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>曹森荣</p></div><div style="margin-top: 5px;text-align: justify;font-size: 12px;"><p style="text-align: center;white-space: normal;">哔哩哔哩资深开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 53%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>肖巧文</p></div><div style="margin-top: 5px;font-size: 12px;"><p style="text-align: left;">哔哩哔哩资深开发工程师</p></div></div></div></div><div style="display: inline-block;vertical-align: middle;width: 32%;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 0% 39.5833%;background-repeat: no-repeat;background-size: 100%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd9Da9xibef7Lm18ua05R4ibK8zklzNezriaU0Nh7wRu4wE7LGskpxkeWgg/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img data-imgfileid="100014679" data-ratio="1.4" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;opacity: 0;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd9Da9xibef7Lm18ua05R4ibK8zklzNezriaU0Nh7wRu4wE7LGskpxkeWgg/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>1. 治理背景和目标</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;1.1&nbsp;治理背景</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><br></p><p style="margin-top: 10px;margin-bottom: 0px;color: rgb(23, 43, 77);font-family: -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 14px;letter-spacing: normal;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);"><span style="font-size: 16px;">B站作为一个有用有趣的综合性视频社区，每个用户都是在与内容的互动过程中形成单向/双向关注和身份上的群体团结，具有相同兴趣爱好的小伙伴聚集在一起形成不同圈子，所以，当小部分用户在社区中有贬低或者拉踩其他用户的行为，甚至出现人身攻击等恶意发言，社区氛围很容易被破坏。</span></p><p style="margin-top: 10px;margin-bottom: 0px;color: rgb(23, 43, 77);font-family: -apple-system, &quot;system-ui&quot;, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 14px;letter-spacing: normal;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);"><span style="font-size: 16px;">社区文化和价</span><span style="font-size: 16px;">值的体现来源</span><span style="font-size: 16px;">于内容的创作和交流</span><span style="font-size: 16px;">，</span><span style="font-size: 16px;">其中评论作为B站用户交流互动最重要的阵地之一，自然也</span><span style="font-size: 16px;">是社区氛</span><span style="font-size: 16px;">围的重要组成</span><span style="font-size: 16px;">部分。根据2022年6月评论的举报理由分布，目前B站负向评论的主要来源为引战和人身攻击。</span></p><p style="word-break: break-all;white-space: normal;"><br></p></div><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;1.2 治理目标</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">社区一直面临一个挑战就是：减少贬损、侮辱、诽谤等粗俗人身攻击内容的曝光，一方面能够促进正向内容和情绪的流通；一方面希望通过治理引导用户正向发言，进一步促进社区友好互动、建设社区氛围，从而让用户看到良好的社区环境和氛围。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p></div><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>2.平台人身攻击内容现状</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>2.1 人身攻击短词</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">首先需要关注的是无差别的纯人身攻击文本，此类文本是不会随着社会或者站内热点事件而变化的包含辱</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">骂、攻击性质的文本。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">常规的攻击性短词是有限且可控的，但是其变体形式是治理的难点。攻击性短词的变体主要包括：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1)&nbsp; 同音同形类（如伞兵、剑冢）；</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2)&nbsp; 首字母匹配类（如出生、我测你码）；</p><p style="word-break: break-all;white-space: normal;">3)&nbsp; 特殊字符、表情、罕见字变体类（如大乃√、🐒）。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014681" data-ratio="0.43425925925925923" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhddJKwibgnQwSicpTTaMibIc2OwYuoPiayGWFJ07me9gibEL6Wyru44zR9DgA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>图2.1.1 ：人身攻击短词变体分析</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>2.2 部分分区人身攻击问题突出</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">由</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">于分区生态与用户习惯的不同</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">，对所有分区一刀切的治理模式是不可取的。为了既能有针对性地解决问题，又能有效引导社区情绪正向发展，我们对生活、娱乐、影视、知识、科技、运动、游戏以及音乐这八个区的人身攻击以及引战的举报情况的摸底，从可评估性、可治理性两个角度发现娱乐、影视区和游戏区的问题更为突出，具体体现在以下两个方面：</span><br></p><ol style="word-break: break-all;margin-bottom: 15px;white-space: normal;padding-right: 8px;padding-left: 8px;font-size: 16px;" class="list-paddingleft-1"><li style="word-break: break-all;margin-bottom: 15px;white-space: normal;padding-right: 8px;padding-left: 8px;font-size: 16px;"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;padding-right: 8px;padding-left: 8px;font-size: 16px;">在游戏、娱乐、影视三个分区中，人身攻击举报的数量远高于平均值，是总人身攻击举报量的大头。</p></li><li style="word-break: break-all;margin-bottom: 15px;white-space: normal;padding-right: 8px;padding-left: 8px;font-size: 16px;"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;padding-right: 8px;padding-left: 8px;font-size: 16px;">在游戏、娱乐、影视三个分区中，人身攻击举报评论的前 100 个关键字里面，实体词的占比分别为 45%、57%、63%，相比于其他话题丰富的区域，这些分区的话题聚焦度更强、可治理性更高。<span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;"></span></p></li></ol></div><div style="text-align: center;" powered-by="xiumi.us"><p><br></p></div><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>3.专项治理过程</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">我们首先结合问题评论锁定要治理的对象是人身攻击。需要特别说明的是，引战评论当然也是问题评论中需要去治理的，但引战问题相对而言更加复杂，定义问题难度更高，因此，在本次治理过程中我们更侧重于更能引发负向情绪的人身攻击评论。整个治理过程见下图3.1：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014686" data-ratio="0.7138888888888889" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhdAdIKElCc8ewuoLD85JbW6ZUrwZkIvyrcZDPnqEMuX6ibkKTibFbp0m5Q/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>图3.1 ：人身攻击治理过程</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>3.1 无差别覆盖治理</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.词匹配识别</p><p style="word-break: break-all;white-space: normal;">针对变形体的识别，依赖已经积累的大量的技术手段包括：拼音识别、数字同音识别、汉字相似识别、单词检测识别、汉字关键词识别、变形体映射等文本预处理能力。通过对用户评论进行文本预处理，我们可以对评论进行归一化，然后使用汉字或拼音进行识别。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014684" data-ratio="0.337037037037037" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhdyy8NlQpezgibc0dMia3iaGg6bw39IfibCpaZVvicfF7rHBNJMbVZPEDGd9w/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>图3.1.1 ：问题和相应文本预处理能力</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">举例其中的汉字相似能力，我们引进了“音形码“的概念（音形码的概念非自创，常用于输入法产品），借助音形码可以快速计算出汉字的相似结果，这里借助这个概念可以把汉字转化成机器可以理解的数字串，数据结构大体上如下图：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014685" data-ratio="0.5018518518518519" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd6zkaiav6aVo81NQR1NkzmmuTkA3FZI6dd6UEfgicObfFDibfOJbe1rfgA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>（图片来源于网络，如有侵权请联系删除）</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">这个结构涵盖了一个字的拼音和字形数据，可以很好的识别 音似例如“傻”和“杀”，形似例如“娘”和“狼”等。具体的上线效果如下：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014682" data-ratio="0.2898148148148148" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhdhlYBZVD5BibnfBUUONqpzzibxQjQ196tNjUccSRROOSCMHnupQuVjBqg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">接口直接根据设置好的相似阈值返回风险文本。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2. 模型识别</p><p style="word-break: break-all;white-space: normal;">根据数据显示，不同分区中人身攻击举报评论的准确度在10%到40%之间，其中绝大多数为阴阳怪气或者对线过程中稍稍偏激的言论。为此，我们在前期准备了多种算法模型，包括人身攻击模型、对线模型以及阴阳怪气模型。依赖模型的语言理解能力，我们能够拦截覆盖掉一部分的纯人身攻击以及引战文本。</p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014689" data-ratio="0.32314814814814813" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhdhg2UVmib1OneWAjF68QD0ZHNZdnXAnItPTSz4E2FMic1ibLwdcyt4aCHA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>图3.1.1 ：人生攻击专项依赖的模型能力</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;">第一类文本分类模型</p></li></ul><p style="margin-bottom: 15px;white-space: normal;">在分类问题上，Fasttext、DPCNN、TextRCNN、Attention、Bert等模型都是比较经典的可用于文本而分类问题上的模型。在 NLP 领域，BERT 的强大毫无疑问，但由于模型过于庞大，单个样本计算一次的开销也会比较大，因此，我们使用比较多的是体量更小、速度更快的tiny_bert。在模型训练的过程中，我们可能面临的一个问题是样本质量不够高导致模型效果不佳，在已有样本的基础上，我们会先通过Bert进行样本提纯，再喂给tiny_bert，以提高模型准确度。而在在对线模型中，我们将输入样本写成“[CLS] +当前评论 + [SEP] + 父评论 + [SEP] +“跟评论” + [SEP]”的格式，让模型学习到对线过程，并采用bert与图神经网络结合的方式进行对线文本的分类，将预训练模型BERT与图网络GCN（GAT）相结合用于文本分类，能充分融合二者处理数据、提取特征的能力，使得模型有比较好的预测效果。</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;">第二类文本相似模型</p></li></ul><p style="margin-bottom: 15px;white-space: normal;">分类模型能帮我们覆盖掉大部分的特殊case，而在B站这个社区平台上，不同的分区有着不一样的文化符号，并且随着各类社会舆情的发生，部分人身攻击文本会具有一定的特殊性，而文本相似模型能根据输入的负向样本种子，快速准确地覆盖掉同关键词、同核心思想文本。</p><p style="margin-bottom: 15px;white-space: normal;"><br></p><p style="white-space: normal;">为了使模型持续有效，我们每周对召回数据和举报数据进行校准，一方面用于评估模型的可用性，另一方面及时向算法侧返回Bad Case和提供新的训练样本，以实现模型对用户多变地发评习性及时作出反应。由于模型的更新并不是实时的，对于突发的高举报案例，我们将相关的数据经过筛选后放入模型后台的黑模型样本集中，对相关负向内容进行拦截。<br></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>3.2 重点分区突破</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">由于不同分区的人身攻击评论的发评人、讨论话题、稿件信息特性不一致，因此问题的严重程度也不一样，词+模型并不能完全解决问题，对于无法覆盖的部分，我们需要对单点问题进行重点突破。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">我们把这一部分的治理分成了以下几个步骤：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1. 确定每个分区的治理内容；</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">基于每个分区特性，对重点分区深入分析，结合社区知识图谱系统，对重点分区的问题进行细致梳理并归纳。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2. 划分治理等级；</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">对不同分区的不同问题进行严重程度分级。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3. 确定治理策略。</p><p style="word-break: break-all;white-space: normal;">结合社区阿瓦隆系统，对线上进行定向管控治理。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>3.2.1 确定分区治理内容</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">结合社区知识图谱系统的抽象归纳，并通过分析上半年的的举报数据，得到重点分区现存人身攻击的需治理的问题，其中娱乐区4个，影视区3个，游戏区2个。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>3.2.2 划分治理等级</strong></p><p><strong><br></strong></p></div></div></div><div powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;padding-right: 8px;padding-left: 8px;font-size: 16px;line-height: 1.75em;">综上，结合举报数据和评论内容，我们划分成两个治理方向：</p><p style="line-height: 1.75em;">&nbsp; 一是针对某一具体对象（人或群体）的带有恶意引导性质或攻击性的评论，这类评论需要予以拦截；</p><p style="line-height: 1.75em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">&nbsp; 二是减少引战类型且容易被举报的调侃或负向梗的曝光度。</span></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><br></p></div><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>3.2.3 确定以及实施治理策略</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">我们的策略围绕着三个维度展开，分别是关键词、人群、稿件以及up主。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">1.关键词维度。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;"></span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">对于人身攻击言论，抨击或辱骂的对象通常是实体。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">基于此，除了人身攻击短词外，我们</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">还分区维护了一个“实体——关键词”知识库。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">我们结合评论内容和稿</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">件</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">信息进行精准匹配，基于匹</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">配情况决策处置策略。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">另外，</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">为了及时发现讨论的话题和实</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">体，我们线上使用高讨论度的事件人物识别模型，再基于报表展示讨论实体，以保证文档信息的持续更新。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">2.人群</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">维度。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;"></span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">从发评者角度来看，可按攻击目标分为两种：</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">一种针对的是非现实个体(明星、游戏、视频内容等），占据大部分，第二种攻击的对象是站内用户或UP主。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">在</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">大多数情况下，第一类用户群更具稳定性和聚集性，因此我们考虑综合行为等多重维度来识别第一类人群。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;"></span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">我们通过互动内容、关系等标记出第一类人群，并采取相应的治理策略。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">经过治理，被举报用户的重复率下降了40%。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">被举报用户的重复率指的是被重复举报用户</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">与被举报用户总数的比例，这个下降趋势表明了极端用户的极端互动行为减少了。</span></p></div><div powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;font-size: 16px;"><br></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014687" data-ratio="0.679465776293823" data-s="300,640" data-type="png" data-w="599" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd6zuUm1gtjdib77BcBPeZtPlZib4Ovlfaia6ZJPciabmm8jsXCUrtHSDic8A/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014693" data-ratio="0.7033333333333334" data-s="300,640" data-type="png" data-w="600" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhdH0BNdNuQicv89qrGqgS9z4vYm3dl2H1dg3c0oTsnbKHRTDeeWZES1jQ/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup style="font-size: 12px;">图3.4 人群包策略实施前（上）后（下）被举报用户重复率</sup></p></div><div powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;line-height: 1.6em;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;font-size: 16px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">3.稿件维度和UP主维度。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;font-size: 16px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">某些稿件自带引战或者人身攻击风险，需要及时干进行干预。对于不同的治理内容，我们结合了关键词、人群稿件以及UP主信息这几维度来部署相应策略。被策略识别为高风险的内容中包含较高浓度的攻击性评论，从中实施高召可以达到精准扩召的效果。</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;line-height: 1.6em;font-size: 16px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">我们提高召回的方式通常包含两种，分别是调整单一模型分的阈值和基于多个模型（如阴阳怪气、对线、文本质量分、立场分）训练一个融合模型的方式。融合模型方式包括常见的线性融合（如多元回归、逻辑回归）和非线性融合（树模型）。而融合模型可以较大程度地丰富召回样本的多样性。</span></p><p style="word-break: break-all;white-space: normal;line-height: 1.6em;"><br></p></div><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>3.3 回查以及跟进</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">持续收集模型训练样本：数据同学根据标注标准，对每周的举报数据进行抽样打标，漏召回case放入模型重新学习，形成良性循环；</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">敏感词系统相似模型召回：漏召回的人身攻击样本清洗一遍以后，作为相似模型的种子，对问题文本召回；</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">基于举报数据线上回查删除：被举报过多次的人身攻击文本，文本的人身攻击模型分&gt;阈值，直接删除；</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">策略的迭代和更新：更新的内容除模型外还有负向词、人群等，基于策略的聚集内容或被反馈的误召回案例对策略进行回查并迭代；</p></li><li><p style="word-break: break-all;">数据探查：通过报表展示或告警风险稿件、人群、单评以及各项举报数据的异常波动。</p></li></ol></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>4. 治理效果</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">经过治理，影视、娱乐以及游戏三个重点分区23年12月份相较于23年6月份，人身攻击举报占比绝对下了31.97%，引战的举报占比24.77%。</strong></p><p style="word-break: break-all;white-space: normal;"><img class="rich_pages wxw-img" data-imgfileid="100014694" data-ratio="0.5333333333333333" data-s="300,640" data-type="png" data-w="1080" style="text-align: center;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhdTS8OP7wia3zh9og4Atbiaqx4PuTDrQ2IOaMyAw8SkVht3JusQDdOXBVA/640?wx_fmt=png&amp;from=appmsg"><br></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>图4.1 影视、娱乐和游戏区的综合人身攻击引战举报占比</sup></p></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p></div><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>5. 总结与展望</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div powered-by="xiumi.us" style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;">经过治理，人身攻击举报占比下降趋势比较明显，但是数值上仍有下探空间。互联网不是法外之地，为了维护一个正向和谐的社区氛围，我们还可以从以下几方面去进行优化：</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;">考虑优化稿件下的内容展示逻辑，丰富内容排序标准。</p></li><li style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;">对于“黑话”、负向关键词的挖掘需要更自动化；</p></li><li style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;">如何引导用户正确选择举报理由或对举报理由进行二次判定以提高举报数据的准确度；</p></li><li style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;">模型短周期的自动化训练和上线；</p></li><li style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><div powered-by="xiumi.us" style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;margin-bottom: 15px;padding-right: 8px;padding-left: 8px;">.......<span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span></p></div></li></ol></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 30px;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014700" data-ratio="2.258503401360544" data-s="300,640" data-type="gif" data-w="147" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://mmbiz.qpic.cn/mmbiz_gif/1BMf5Ir754RWEyE2H1PXib3ON2FcQhKhd6OLEibPF8U8kEJ0dDNNPRzbSlGtLVmYtG5mQG0huBeLBpCcdW4KsJoA/640?wx_fmt=gif&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>哔哩哔哩技术年货送不停</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="margin-bottom: 15px;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>在B站，你认为还有哪些负面内容需被治理呢？</strong></span>欢迎在留言区告诉我们。<strong>点赞并转发参与下方抽奖</strong>，小编将抽取3位幸运的小伙伴送出<strong><span style="text-decoration: underline;">龙年小电视抱枕</span></strong>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>2月23日中午12点开奖。</strong></span><strong style="color: rgb(255, 102, 149);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;">哔哩哔哩技术祝您龙年风调码顺，日富一日！</strong></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p><mp-common-miniprogram data-miniprogram-nickname="抽奖助手" data-miniprogram-avatar="http://mmbiz.qpic.cn/mmbiz_png/Vdys2e8jP1l1clbflznHYO7IRflCZWjPfD4NMn1Xqgr5gZbBy1qVc12cGVG1whLTXiafBT7kiaWRl38HCbqLnRzw/640?wx_fmt=png&amp;wxfrom=200" data-miniprogram-title="龙年小电视抱枕*3" data-miniprogram-imageurl="http://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754RPRMPuiawC8yL2tJWczk2tuyhJnC3SI1fK9rSe7I2IeqRgB7OrgG3cBIqLLGUJedxajgWlB2UOrow/0?wx_fmt=jpeg" data-miniprogram-type="card" data-miniprogram-servicetype="0" data-pluginname="insertminiprogram" class="js_uneditable custom_select_card mp_miniprogram_iframe" data-miniprogram-appid="wx01bb1ef166cd3f4e" data-miniprogram-applink="#小程序://抽奖/4WcKLYXIHQ45Osw" data-miniprogram-path="pages/lucky/lottery/detail?id=8xgWTnGYT3y"></mp-common-miniprogram></p><p style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><br></p><p style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247496204&amp;idx=1&amp;sn=9738c7048008cc5f869e1ac50180480c&amp;chksm=cf2f3729f858be3f790c49155566d40f63dffccaa4d52594277b1c1857ac070c00e87aa73f17&amp;scene=21#wechat_redirect" textvalue="告警平台：给告警一个胶带" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">告警平台：给告警一个胶带</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247494098&amp;idx=1&amp;sn=adace79cf2c8104ba42adf7b17f59749&amp;chksm=cf2f2cf7f858a5e1632cd900c80d522aa5fd0a74e7bbd2fc0a6c62d7f425372bd2eabc090f96&amp;scene=21#wechat_redirect" textvalue="B站埋点分析平台的构建之路" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站埋点分析平台的构建之路</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247497953&amp;idx=1&amp;sn=69bbe0ff49bdd77b20630ed9c456c7e3&amp;chksm=cf2f3dc4f858b4d20c941756772b964f7b179755f8c9b6a3489ec48de51311a90f34239afc97&amp;scene=21#wechat_redirect" textvalue="爬虫与反爬-接口安全的风控介绍" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">爬虫与反爬-接口安全的风控介绍</a></p></li></ul></div></div></div></div></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-signature="生产快乐的地方" data-from="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0"></mp-common-profile></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>曹森荣&amp;肖巧文</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文末新春好礼送不停丨人生攻击与引战类评论的社区治理]]></title>
        <id>2247498354_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498354&amp;idx=1&amp;sn=0b4bd116e89076f0b1586fb4b72d7029&amp;chksm=cf2f3f57f858b641bbb692b1ca7763f9dafe06207785baeac15b56cb8674757629b7f99424f5#rd"/>
        <updated>2024-02-08T09:36:38.000Z</updated>
        <author>
            <name>曹森荣&amp;肖巧文</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文末新春礼盒等你领丨Web 终极拦截技巧（全是骚操作）]]></title>
        <id>2247498324_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498324&amp;idx=1&amp;sn=5cfa17d63fdc0efc93c609a79211e0b8&amp;chksm=cf2f3f71f858b667446a2f2b76b488835b4720d49e4b74ffe73e58ab452266c0464c4b692d7c#rd"/>
        <updated>2024-02-05T12:00:23.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;background-position: center center;background-repeat: no-repeat;background-size: cover;overflow: hidden;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754Sib7UoZvrmfaiaNJRy0XoKPzialOcyKGqE8fx3iaGtc7m4eTsjco7A8BOewsISBFdyeLBntUrnLm2KKQ/640?wx_fmt=png&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014664" data-ratio="0.6648148148148149" data-s="300,640" data-type="png" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754Sib7UoZvrmfaiaNJRy0XoKPzialOcyKGqE8fx3iaGtc7m4eTsjco7A8BOewsISBFdyeLBntUrnLm2KKQ/640?wx_fmt=png&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>刘俊</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩资深开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>拦截的价值</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;white-space: normal;">计算机科学领域的任何问题都可以通过增加一个中间层来解决。—— Butler Lampson</p></div></div></div></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如果系统的控制权、代码完全被掌控，很容易添加中间层；<br>现实情况我们往往无法控制系统的所有细节，所以需要使用一些<strong>&nbsp;“非常规”（拦截）&nbsp;手段来增加中间层</strong>。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">常见的场景有</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">自动上报未捕获的错误，进行错误监控</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">拦截网络请求（fetch、xhr）进行接口性能统计、统一错误码处理、远程 debug 接口</p></li><li><p style="word-break: break-all;">构造执行第三方代码、微应用必须的沙盒环境</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>拦截方法</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>拦截/覆写浏览器 API</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">最常见的场景有通过拦截 console 实现错误上报。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">const</span> _error = console.error;</span></code><br><code><span class="code-snippet_outer">console.error = (...args) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp;_error.apply(console, args);</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp;console.info(<span class="code-snippet__string">'在此处上报错误信息...'</span>);</span></code><br><code><span class="code-snippet_outer">};</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 其它代码打印错误</span></span></code><br><code><span class="code-snippet_outer">console.error(<span class="code-snippet__string">'error message'</span>);</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">项目中通常会基于 axios 此类的网络库，做一些统一处理逻辑</p><p style="word-break: break-all;white-space: normal;">但在某些场景，我们无法修改项目代码，就能通过拦截 fetch, xhr 来达到目的。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 接口性能监控，打开 https://example.com/， 在控制台执行以下代码</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__keyword">const</span> _fetch = window.fetch;</span></code><br><code><span class="code-snippet_outer">window.fetch = (...args) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">const</span> startTime = performance.now();</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">return</span> _fetch(...args).finally(() =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;console.info(<span class="code-snippet__string">'接口耗时：'</span>, Math.round(performance.now() - startTime), <span class="code-snippet__string">'ms'</span>);</span></code><br><code><span class="code-snippet_outer"> &nbsp;});</span></code><br><code><span class="code-snippet_outer">};</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__function">await <span class="code-snippet__title">fetch</span><span class="code-snippet__params">(<span class="code-snippet__string">'//example.com'</span>)</span></span>;</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">你可以选择第三方库（比如 xhook：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://github.com/jpillora/xhook/</em></span>）来快速实现 fetch, xhr 拦截功能。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">浏览器中大多数 API 都是可以覆写的，<strong>打开脑洞</strong>，可以实现非常多的神奇功能：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">网络 API （xhr, fetch, WebSocket）</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">性能监控、统一错误码处理</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">添加额外 HTTP 参数（header, query）实现接口染色功能</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">修改&nbsp;Host&nbsp;将接口自动转向代理服务，实现远程调试接口、Mock 数据</p></li></ul><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">修改原型 （Array.prototype.at = ...）</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">polyfill 库的必备手段</p></li></ul><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">页面跳转 API （window.open,&nbsp;history.go back pushState）</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">修改跳转的目的页面</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">自动添加页面跳转埋点</p></li></ul><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">删除特定 API 禁用浏览器功能</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">禁止 js 访问摄像头&nbsp;navigator.mediaDevices.getDisplayMedia = null</p></li><li><p style="word-break: break-all;">禁止 p2p 连接&nbsp;window.RTCPeerConnection = null</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>事件、DOM 元素</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">浏览器也会提供一些具备拦截性质的 API，允许开发者实现特定功能。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">一个 DOM 元素经常会绑定许多事件，如果你想让特定的事件回调函数先执行，以便添加一些前置逻辑或取消后续事件的执行；</p><p style="word-break: break-all;white-space: normal;">可以了解&nbsp;<strong>addEventListener#usecapture&nbsp;(opens new window)</strong>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#usecapture</em></span>）的用法。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 禁止响应页面的所有点击事件（危险⚠️），第三个参数（usecapture）设为 true</span></span></code><br><code><span class="code-snippet_outer">document.body.addEventListener(</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__string">'click'</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp;(evt) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt.preventDefault();</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;evt.stopPropagation();</span></code><br><code><span class="code-snippet_outer"> &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__literal">true</span></span></code><br><code><span class="code-snippet_outer">);</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">许多 DOM 元素都是在运行时动态创建的，如果需要修改动态创建的 DOM 元素可使用&nbsp;<strong>MutationObserver(opens new window)</strong>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver</em></span>）</p><p style="word-break: break-all;white-space: normal;">比如，拦截所有超链接（a&nbsp;标签），给目标链接添加&nbsp;_source&nbsp;参数</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">const</span> observer = <span class="code-snippet__keyword">new</span> MutationObserver((mutationsList) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">for</span> (<span class="code-snippet__keyword">const</span> mutation of mutationsList) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> (mutation.type !== <span class="code-snippet__string">'childList'</span> || !mutation.addedNodes) <span class="code-snippet__keyword">return</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;mutation.addedNodes.forEach((item) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> (!item.nodeName === <span class="code-snippet__string">'A'</span>) <span class="code-snippet__keyword">return</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">const</span> targetUrl = <span class="code-snippet__keyword">new</span> URL(item.href, location.href);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;targetUrl.searchParams.append(<span class="code-snippet__string">'_source'</span>, <span class="code-snippet__string">'any string'</span>);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;item.href = targetUrl.href;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;});</span></code><br><code><span class="code-snippet_outer"> &nbsp;}</span></code><br><code><span class="code-snippet_outer">});</span></code><br><code><span class="code-snippet_outer">observer.observe(document.body, {</span></code><br><code><span class="code-snippet_outer"> &nbsp;attributes: <span class="code-snippet__literal">true</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp;childList: <span class="code-snippet__literal">true</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp;subtree: <span class="code-snippet__literal">true</span>,</span></code><br><code><span class="code-snippet_outer">});</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">TIP：MutationObserver 同样适应于修改 iframe, img 的链接，或其它任意 DOM 元素的属性</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>调试小技巧</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如果你的页面因未知代码陷入了快速刷新的死循环，可在项目中添加以下以下代码；</p><p style="word-break: break-all;white-space: normal;">页面刷新前会进入 debug 状态，在 devtools 中查看调用堆栈（call stack）即可了解刷新的原因</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">window.addEventListener(<span class="code-snippet__string">'beforeunload'</span>, () =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp;debugger;</span></code><br><code><span class="code-snippet_outer">});</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">TIP：http 302 属于非代码导致页面跳转，上述代码无法拦截</p><p style="word-break: break-all;white-space: normal;">当调试第三方代码时，需要监听某个不符合期望的对象属性值</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// debug 状态下任意可访问对象</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__keyword">const</span> obj = { prop: <span class="code-snippet__number">1</span> };</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 在 devtools -&gt; console 中执行以下代码</span></span></code><br><code><span class="code-snippet_outer">_obj_prop = obj.prop;</span></code><br><code><span class="code-snippet_outer">Object.defineProperty(obj, <span class="code-snippet__string">'prop'</span>, {</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__built_in">set</span>: (v) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;_obj_prop = v;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// 每次赋值都会进入 debug 状态</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;debugger;</span></code><br><code><span class="code-snippet_outer"> &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp;get: () =&gt; _obj_prop,</span></code><br><code><span class="code-snippet_outer">});</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 试试执行 obj.prop = 2</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 后续可在 console 中随时访问 _obj_prop 的当前值</span></span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">如果需要监听某个对象所有属性值被读写的消息，可以使用&nbsp;Proxy</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">const</span> obj = { prop: <span class="code-snippet__number">1</span> };</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__keyword">const</span> obj2 = <span class="code-snippet__keyword">new</span> Proxy(obj, {</span></code><br><code><span class="code-snippet_outer"> &nbsp;get(target, key, receiver) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> Reflect.get(target, key, receiver);</span></code><br><code><span class="code-snippet_outer"> &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__built_in">set</span>(target, key, value, receiver) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;debugger;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> Reflect.<span class="code-snippet__built_in">set</span>(target, key, value, receiver);</span></code><br><code><span class="code-snippet_outer"> &nbsp;},</span></code><br><code><span class="code-snippet_outer">});</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 试试执行 obj2.abc = 2</span></span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">注意差异</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">Object.defineProperty&nbsp;没有改变&nbsp;obj&nbsp;的引用，Proxy&nbsp;生成了新对象&nbsp;obj2</p></li><li><p style="word-break: break-all;">使用&nbsp;Proxy&nbsp;可以监听对象（obj2）所有属性的读写，而&nbsp;Object.defineProperty&nbsp;一次只能监听一个属性（prop）</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>ServiceWorker 拦截</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">前端可能会使用 ServiceWorker 来实现离线可用、缓存资源、加速页面访问等功能。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 安装时缓存资源</span></span></code><br><code><span class="code-snippet_outer">self.addEventListener(<span class="code-snippet__string">'install'</span>, (event) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp;event.waitUntil(</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;caches</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;.open(<span class="code-snippet__string">'v1'</span>)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;.then((cache) =&gt; cache.addAll([<span class="code-snippet__string">'/index.html'</span>, <span class="code-snippet__string">'/style.css'</span>, <span class="code-snippet__string">'/app.js'</span>]))</span></code><br><code><span class="code-snippet_outer"> &nbsp;);</span></code><br><code><span class="code-snippet_outer">});</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 拦截页面资源请求，使用缓存响应（也可使用自定义内容响应请求）</span></span></code><br><code><span class="code-snippet_outer">self.addEventListener(<span class="code-snippet__string">'fetch'</span>, (event) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp;event.respondWith(</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;caches.match(event.request).then((response) =&gt; {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> response;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;})</span></code><br><code><span class="code-snippet_outer"> &nbsp;);</span></code><br><code><span class="code-snippet_outer">});</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">ServiceWorker 是前端页面到服务器之间的中间层，<strong>它能拦截同域名下的所有请求</strong>，缓存或篡改请求结果，能实现的功能远不止离线或加速访问这么简单。</p><p style="word-break: break-all;white-space: normal;">后文会从 WebContainer 原理分析 ServiceWorker 的高端玩法。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>服务器拦截</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">前面介绍的技巧都局限在客户端（浏览器）中，如果你掌握了真正的服务控制权，即配置服务器和内网 DNS 域名等权限（一般由公司内的工程效率团队或运维负责），再配合前面介绍的浏览器拦截技巧，可玩性将大大增加。</p><p style="word-break: break-all;white-space: normal;">一个 HTTP 请求往往会经过多个服务器节点，<strong>每个节点就是一个中间层</strong>。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="138" data-imgfileid="100014661" data-ratio="0.2851851851851852" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 165px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TLCctBiaTiauibrf5BRicQvFVh2mmZnIj0Ot8KotibibSEjGL9qZeCuQOMTNge7wia0YeE1FlzzVg3cHSEQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.DNS 决定 HTTP 请求由哪个网关（Nginx）处理</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;margin-left: 16px;margin-right: 16px;">a.如果你能控制 DNS 服务，则<strong>可以在网关之前再加一个中间层</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.服务器节点（网关、Service）节点能获取、篡改 HTTP 请求中的所有信息：Header、Cookie、Body</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;margin-left: 16px;margin-right: 16px;">a.根据 HTTP 信息，可将请求转发到本地目录（静态资源），或转发到其他远程服务</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;margin-left: 16px;margin-right: 16px;">b.添加 Cookie 追踪用户，实现灰度、AB 实验分流等功能</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;margin-left: 16px;margin-right: 16px;">c.实现业务层无感知注入代码</p><p style="word-break: break-all;white-space: normal;margin-left: 16px;margin-right: 16px;">d.动态篡改数据，实现 Mock 功能</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>如何注入代码</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">前文介绍的客户端拦截技巧都需要<strong>在浏览器中注入代码</strong>，以下列举注入代码的方式，根据目的和能获取的权限决定采用哪种方式。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.源码注入</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">如果你有源码控制权，那你可以对项目做任何事情，确保拦截代码优先执行即可</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">优点：灵活可控；缺点：通用性不好，侵入业务</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.构建、推送服务注入</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">工程团队提供构建、推送服务，可编写脚本在构建产物中注入代码（比如 html 中添加 script 标签）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">优点：业务无感知，通用性好；缺点：不一定有权限</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3.网关注入</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">Nginx 向 html 中注入 script 也很简单</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">优点同上，一般限于在开发、测试环境，不会上生产环境</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">4.浏览器插件、devtools 注入</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">如果你啥权限都没有（普通用户），又想干一些“坏事”，则可选择使用插件注入代码，或临时在 devtools 的 console 面板直接写代码</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">优点：万能注入、无法阻挡；缺点：只能影响当前浏览器，难以跨浏览器、设备、用户</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">常用的脚本管理插件：<strong>篡改猴&nbsp;(opens new window)</strong>（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo</em></span>），也可考虑自己写浏览插件</p></li></ul><p style="word-break: break-all;white-space: normal;">尽量让被注入的代码<strong>早于业务代码执行</strong>，比如实现拦截并上报错误信息，如果被注入的代码执行时机较晚，则会丢失执行前的错误信息。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>案例分析</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>WebContainer 原理</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">WebContainer (opens new window)是一种基于浏览器的运行时，可完全在浏览器标签页内执行 Node.js 应用程序和操作系统命令。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">惊艳的地方有两点：</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">能在浏览器中运行 Node 服务，居然还能启动 DevServer “监听端口”</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">离线后 IDE 开发中的页面也能正常开发</p></li></ol><p style="word-break: break-all;white-space: normal;">以&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://stackblitz.com/edit/nextjs-9hpfxj?file=package.json</em></span><span style="color: rgb(62, 62, 62);">&nbsp;(opens new window)为例</span></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="201" data-imgfileid="100014662" data-ratio="0.39444444444444443" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 228px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TLCctBiaTiauibrf5BRicQvFVhYWpTz843J9s4pLZnRoWgGIhMbPbrN2sEUSt1hYhGLzj27QNWqUzn9Q/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">核心部分是将 Node 编译成 WASM，然后 Mock 文件系统、底层网络模块 使其能在浏览器中运行。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">然后使用 Node 启动 devServer 服务，监听端口。</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">dev 页面发起的请求被 ServerWorker 拦截映射成本地 Mock 的文件</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">本地 Mock 的文件由 IDE 源码使用 Node 编译而成</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">源码的依赖包被映射成 http 请求从远端获取</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">比如安装依赖 react-dom 对应的网络请求是：<br><span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://t.staticblitz.com/w/v13/h/e/react-dom@18.2.0</em></span>(opens new window)</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在浏览器中运行 DevServer 时，当然无法监听 TCP 端口。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">巧妙的地方是将端口映射成唯一的域名，通过 ServiceWorker 拦截域名下的所有请求，关联到 Mock 的文件系统。</p><p style="word-break: break-all;white-space: normal;">详情请看&nbsp;WebContainer 原理分析(opens new window)</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>沙盒</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;"><p style="word-break: break-all;white-space: normal;">沙盒（sandbox，又译为沙箱）是一种安全机制，为执行中的程序提供隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。</p></div></div></div></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">假设你需要执行一段第三方代码，安全要求禁止访问 document，以及 window 下的 open、location。</p><p style="word-break: break-all;white-space: normal;"><em>尝试复制以下代码在 console 中执行</em></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">function <span class="code-snippet__title">safeExec</span><span class="code-snippet__params">(code)</span> </span>{</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">const</span> proxyWindow = <span class="code-snippet__keyword">new</span> Proxy(window, {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;get(target, key, receiver) {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> ([<span class="code-snippet__string">'open'</span>, <span class="code-snippet__string">'location'</span>, <span class="code-snippet__string">'document'</span>].includes(key))</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">throw</span> <span class="code-snippet__keyword">new</span> Error(`禁止访问 key: ${key}`);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> (key === <span class="code-snippet__string">'window'</span>) <span class="code-snippet__keyword">return</span> proxyWindow;</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> Reflect.get(target, key, receiver);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;},</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__comment">// set() {}</span></span></code><br><code><span class="code-snippet_outer"> &nbsp;});</span></code><br><code><span class="code-snippet_outer"> &nbsp;<span class="code-snippet__keyword">new</span> Function(<span class="code-snippet__string">'window'</span>, `with(window) { ${code} }`)(proxyWindow, null);</span></code><br><code><span class="code-snippet_outer">}</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">// Error 禁止访问 key: open</span></span></code><br><code><span class="code-snippet_outer">safeExec(`window.open(<span class="code-snippet__string">'//danger.com'</span>)`);</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">沙盒也是前端微应用的核心技术，通过 Proxy 监听 window 的读写记录，可以隔离多个微应用的运行环境，卸载某个微应用后也能将环境（window 对象）重置回该应用加载前的状态。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>通用域名服务</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">一般 Web 开发者使用会使用 localhost:8080、192.168.0.1:8080&nbsp;这个访问开发环境；</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如果使用真实域名来转发请求到开发环境（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://ff-dev.bilibili.com?_ip_=192.168.0.1&amp;_port_=8080</em></span>），能解决一些常见的问题：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">轻易实现共享域名（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>bilibili.com</em></span>）的登录态 cookie</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">无需配置 Web 服务的 https 证书</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">仅限于安全上下文的特性（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/zh-CN/docs/Web/Security/Secure_Contexts/features_restricted_to_secure_contexts</em></span>）</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: square;margin-left: 48px;margin-right: 48px;"><li><p style="word-break: break-all;margin-bottom: 15px;">在手机上使用 https 协议访问开发服务，避免 http 协议导致许多 Web API 不可用</p></li></ul><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">该服务是一个天然的中间层，可无感注入代码实现效率工具，比如：</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">远程网络抓包、Mock</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">移动端控制台（eruda）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">远程代码调试（chii）</p></li><li><p style="word-break: break-all;">切换后端接口环境、接口染色</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014663" data-ratio="0.62117903930131" data-s="300,640" data-type="png" data-w="916" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754Sib7UoZvrmfaiaNJRy0XoKPz8ibic5iaXtibPlb8iaBYUGulCib3CMQ93eiaJtVoDBX8CHm6OIA1vicKFNSHqg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">真实域名转发请求，能解决部分场景的问题，也会带来一些新问题需要解决：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">静态资源（/index.js）不带参数，无法转发到目的地，无法初始化页面</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">页面跳转后，域名或参数（_ip_, _port_）会丢失</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">HMR 的 WebSocket（192.168.0.1:4000/socket.io） 连接失败，无法自动热更新</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">解决这问题确实有一些难度，好在前文已经介绍了对应的拦截技巧；</p><p style="word-break: break-all;white-space: normal;">一旦解决问题部署通用域名服务后，就能给许多人提供便捷服务。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><strong>实现原理</strong></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="261" data-imgfileid="100014660" data-ratio="0.4462962962962963" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 258px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TLCctBiaTiauibrf5BRicQvFVhUibO4n3y6JslsZ2yuX3MrARBGXOk9tZvYKMq33zCibpWvo3WGMWJo7lA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.加载 HTML</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">部署一个 Nginx 服务，并为其注册域名（<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>ff-dev.bilibili.com</em></span>）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">在 Nginx 中读取 http 请求的 query 参数（_ip_, _port_），将请求转发到对应目标</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">目标响应后，将参数也写入到 Response 的 cookie 中</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">如果是 html 请求，则在 body 中注入 js</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: square;margin-left: 48px;margin-right: 48px;"><li><p style="word-break: break-all;margin-bottom: 15px;">&lt;body&gt;...&lt;body&gt; 替换为&lt;body&gt;&lt;script&gt; src="ff-dev-sdk.js"/&gt;...&lt;/body&gt;</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.加载静态资源<br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">静态资源（/index.js）不带参数，Nginx 改成从 cookie 中读取参数，然后将请求转发到目的地</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3.解决页面跳转参数丢失</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">ff-dev-sdk.js 拦截所有 a 标签、重写 open 方法，在页面跳转的 url 添加参数（_ip_, _port_）；</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">页面跳转后，新页面也能转发到正确的目的地</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">4.解决 HMR 无法热更新</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">ff-dev-sdk.js&nbsp;覆写&nbsp;WebSocket&nbsp;的实现，将链接&nbsp;192.168.0.1:4000/<span style="color: rgb(12, 182, 242);"><em><span style="text-decoration: underline;">socket.io</span></em></span>&nbsp;替换为&nbsp;<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>ff-dev.bilibili.com/socket.io?_ip_=192.168.0.1&amp;_port_=4000</em></span>&nbsp;继续由 Nginx 转发<br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以上步骤使用的技巧在前文都有介绍</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">注入 js 代码到 html 中，写入参数（_ip_, _port_）到 cookie 中</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">拦截 a 标签</p></li><li><p style="word-break: break-all;">覆写 API：open，WebSocket</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>总结</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>应用中间层思路的经验</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;"><strong>“添加一个中间层”</strong>是一种有效且通用的解决问题的思路</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">根据需要解决的问题，思考中间层的位置、以及一个能<strong>注入代码时机</strong>，并让代码尽早执行</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">源码注入脚本</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">构建、推送服务注入</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">网关注入</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">浏览器插件、devtools 注入</p></li></ul><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">Web 技术栈拥有非常大的可操作空间</p></li></ul><ul class="list-paddingleft-1" style="list-style-type: circle;margin-left: 32px;margin-right: 32px;"><li><p style="word-break: break-all;margin-bottom: 15px;">利用 js 的动态特性，覆写系统 API 实现拦截</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">灵活使用具有拦截性质的 API</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">ServiceWorker</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">了解 HTTP 请求的构成（Header、Cookie、Body），以及它流转的节点</p></li></ul><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">多种拦截技巧灵活搭配，释放更强大的力量</p></li><li><p style="word-break: break-all;">能力越强（拦截范围越大）、责任越大，<strong>注意安全</strong></p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;安全边界</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">从前文看由于 js 灵活特性，甚至看起来有点不安全（覆写系统 API），但恰恰相反，Web 平台常与“安全”一起出现。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">js 的动态灵活是运行在 Web 安全边界（同源策略：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</em></span>、内容安全策略：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</em></span> ）构建的“大沙盒”内的。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">新手开发者常碰到的跨域问题，就是因为碰到了安全边界，安全边界是 Web 平台能力受限（相对 Native）的重要原因之一。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">Web 平台中的所有技巧策略都必须符合安全规则；</p><p style="word-break: break-all;white-space: normal;">所以，建议大家在学习拦截技巧的同时，了解同源策略、内容安全策略(CSP) 等安全知识。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>太骚了，接受不了？</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">从《通用域名服务》章节的原理来看，似乎有点过于“骚操作”了；</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">从效率角度出发，不要在乎骚不骚、脏不脏，有价值就干。</p><p style="word-break: break-all;white-space: normal;">解决“规范与效率”之间的冲突：隔离脏代码，不拉低系统整体代码质量。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>附录</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">addEventListener#usecapture：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#usecapture</em></span></p></li><li><p style="word-break: break-all;margin-bottom: 15px;">MutationObserver：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver</em></span></p></li><li><p style="word-break: break-all;margin-bottom: 15px;">ServiceWorker：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker</em></span></p></li><li><p style="word-break: break-all;margin-bottom: 15px;">WebContainers：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://webcontainers.io/</em></span></p></li><li><p style="word-break: break-all;margin-bottom: 15px;">WebContainer 原理分析：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://hughfenghen.github.io/posts/2023/03/29/webcontainer/</em></span></p></li><li><p style="word-break: break-all;margin-bottom: 15px;">浏览器的同源策略：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</em></span></p></li><li><p style="word-break: break-all;">内容安全策略（CSP）：<span style="text-decoration: underline;color: rgb(12, 182, 242);"><em>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</em></span></p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>还有哪些提升效率的拦截技巧和应用场景？</strong></span>欢迎在留言区告诉我们。<strong>点赞并转发参与下方抽奖</strong>，小编将抽取3位幸运的小伙伴送出<span style="text-decoration: underline;"><strong>哔哩哔哩“一笼好运“新春礼盒</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>2月7日中午20点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong><br></strong></span></p><p style="word-break: break-all;white-space: normal;"><br></p></div><p><mp-common-miniprogram data-miniprogram-nickname="抽奖助手" data-miniprogram-avatar="http://mmbiz.qpic.cn/mmbiz_png/Vdys2e8jP1l1clbflznHYO7IRflCZWjPfD4NMn1Xqgr5gZbBy1qVc12cGVG1whLTXiafBT7kiaWRl38HCbqLnRzw/640?wx_fmt=png&amp;wxfrom=200" data-miniprogram-title="【一笼好运】新春礼盒×3" data-miniprogram-imageurl="http://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754TLCctBiaTiauibrf5BRicQvFVhnWZfcvvV9cSnoaic6GkQav5cCR4qGUsNVA63uW7YF5kMHOdd5ibFgPVQ/0?wx_fmt=jpeg" data-miniprogram-type="card" data-miniprogram-servicetype="0" data-pluginname="insertminiprogram" class="js_uneditable custom_select_card mp_miniprogram_iframe" data-miniprogram-appid="wx01bb1ef166cd3f4e" data-miniprogram-applink="#小程序://抽奖/EjF5qmbz7o0wJii" data-miniprogram-path="pages/lucky/lottery/detail?id=8wVptoNXAvM"></mp-common-miniprogram></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><br></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><br></p></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247494996&amp;idx=1&amp;sn=c776c04a6d4d2692584b5f745448066d&amp;chksm=cf2f2871f858a167935e11950a7d85d249c55c9c2de2c00c392ade975d5961e4737ce8319201&amp;scene=21#wechat_redirect" textvalue="Web 端实时防挡脸弹幕（基于机器学习）" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">Web 端实时防挡脸弹幕（基于机器学习）</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498175&amp;idx=1&amp;sn=c00bc752a72595fc8d52174301116626&amp;chksm=cf2f3c9af858b58c9d7902bfca13d5940fa5e5cd5565b2c9f91c93c4296859eda9464a34b521&amp;scene=21#wechat_redirect" textvalue="WebCodecs 开启 Web 音视频新篇章" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">WebCodecs 开启 Web 音视频新篇章</a><br></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247497652&amp;idx=1&amp;sn=abfd3028ca872ebc9591bedb110e440d&amp;chksm=cf2f3291f858bb87086f6ef2787740ac695f2085adf901b5db81e53f55c4ac4d949360553506&amp;scene=21#wechat_redirect" textvalue="B站安全生产专项建设实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站安全生产专项建设实践</a></p></li></ul></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>刘俊</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[会员购交易系统架构演进]]></title>
        <id>2247498306_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498306&amp;idx=1&amp;sn=55c07cb782fa43bcb3bf0d5049ed3d34&amp;chksm=cf2f3f67f858b671056a65518889fd09e8529f5134acca8133f3babdda81859e9404285e028b#rd"/>
        <updated>2024-02-01T07:01:42.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 100% 16.129%;background-repeat: no-repeat;background-size: 104.688%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QvOx19pOAgBknEnCVsseA6243OJXVgWyGa3P1jKbVWCnHV9SHFgnHhjHia4jBvFwyehDIxzDibFOEA/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014636" data-ratio="1.7777777777777777" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QvOx19pOAgBknEnCVsseA6243OJXVgWyGa3P1jKbVWCnHV9SHFgnHhjHia4jBvFwyehDIxzDibFOEA/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>姜健</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩资深开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>1.背景</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">会员购是B站2017年推出的IP消费体验服务平台，在售商品以手办、漫画、JK制服等贴合平台生态的商品为主。随着业务发展，会员购从最开始的预售，现货拓展到全款预售，盲盒，众筹等多种售卖方式，销售渠道也遍布 猫耳（现已下线），QQ小程序，漫画等多个业务渠道，再加上不断增加的营销活动玩法，每年几次大促活动的爆发式流量，对于会员购交易系统来说，无疑是一个巨大的挑战。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>2.性能</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">每年的拜年纪，626（公司周年庆），919（会员购周年庆），会员购都会搞大促活动，运营会挑选一些比较热门的手办进行首发，加上提前发放红包优惠券，各种优惠活动的刺激，每次大促0点开售流量就是几百倍的爆发，早期也因为压力太多出过几次事故，所以如何优化性能，提高交易的吞吐量是首要的。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>2.1调用链路优化</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">面临问题：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在最初版的系统中，下单接口有明显的等待时间，用户体验不是很好，能支持的最大qps也有限</p><p style="word-break: break-all;white-space: normal;">如图 2-1 所示 通看分析下单调用链路发现，存在多个接口重复调用，接口全是串行调用的情况，下单接口耗时太长，达到400+ms，已经严重影响系统性能及用户体验</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014632" data-ratio="0.3472222222222222" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6Yp1Q328vcAQ6PKibkyuDkk1rrSbAw1Dp5XKJ8Pwh5Cayia5zT3I660Zw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>图 2-1 初版下单链路图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">从链路上可以看出下单是IO密集型应用，CPU 利用率低，代码串行执行的话同步等待时间较长，为此我们重新梳理下单业务逻辑，对下单流程进行责任链模式改造，如2-2图所示</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014634" data-ratio="0.35185185185185186" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6TgbP4T7Bx4jFKdklqL6qlJzk3CJL1t8U8UDgPcvj0166BwFqC5z2icA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-2 下单链路简单示意图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">同时我们对系统做了以下优化</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">对没有依赖的服务进行并发调用（商品/店铺/活动/用户信息等一起并发调用），如图2-3所示</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">优化调用链减少冗余调用，推动下游服务接口改造及合并，保证一次请求下来，每个基础接口只会被调用一次，如图2-3所示</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">设置合理的超时时间和及连接重试（200ms, 部分接口99分位上浮100%,connect连接重试）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">排除事务内的外部调用（服务依赖，mq，缓存）</p></li><li><p style="word-break: break-all;">对弱依赖接口进行mq或异步调用（设置关注/缓存手机号/回滚库存优惠券等）&nbsp;</p></li></ol></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014633" data-ratio="0.5388888888888889" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6aAjm5hYBLMWtCD0EZHIKrOepaUhCammgwZJ3TOGaqJABKkv296VV3A/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-3 优化后的调用链路</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">经过优化后的接口耗时如2-4图所示，从原来300ms降低100ms左右，效果比较显著，用户的下单体验得到较大提升</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin: 10px 0%;text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 50%;padding-right: 5px;align-self: center;flex: 0 0 auto;"><div style="text-align: center;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014635" data-ratio="0.5722222222222222" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6gicRpggMqgp1b07NPwUAKMGMPySWbx314Vy4LSgsicNZyKlXQI1bQyxQ/640?wx_fmt=png&amp;from=appmsg"></p></div></div><div style="display: inline-block;vertical-align: middle;width: 50%;padding-left: 5px;align-self: center;flex: 0 0 auto;"><div style="text-align: center;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 85%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014641" data-ratio="0.7024390243902439" data-s="300,640" data-type="png" data-w="1025" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6VaSOFEGAQn45FtQ3Q7icf1FZvNEvC737fO9uUwDz0TZnrZO0NILNib9A/640?wx_fmt=png&amp;from=appmsg"></p></div></div></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-4 下单耗时对比图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>2.2异步下单优化</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">面临问题：电商活动离不开秒杀场景，通常情况下小库存秒杀做好限流的话问题不大，但拜年祭手办通常有5000个左右的库存，如2-5如图所示，属于大库存秒杀 ， 限流值设得太小会严重影响用户体验 ，大库存抢购时下单qps遇到瓶颈 600+qps的时候库存服务行锁比较严重，耗时开始大幅上升，大量数据库操作占用连接数较高。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="1156" data-imgfileid="100014640" data-ratio="2" data-s="300,640" data-type="png" data-w="640" style="vertical-align: middle;width: 578px;height: 1156px;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754SKTrPBK1h9qEDuwkFjhr9qlVdhWB7IQibGjkI09MlF9lACQpRo8Y4GPIgFvd04RRK47aqqNpLSC9w/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-5 拜年纪商品</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">思考：服务器的处理能力是恒定的，就像早高峰一样，需要错峰限行，这就是我们说的削峰，对流量进行削峰不仅让服务器处理得更加平稳，也节省服务器资源。一般削峰的手段有验证码，排队等方式，这里我们主要是采用异步下单这种排队的做法。</p><p style="word-break: break-all;white-space: normal;">说到排队，最容易想到的就是消息队列，可以通过消息队列把两个系统模块进行解耦，对于抢购场景来说也是非常合适的，可以有效把流量通过队列来承接，然后平滑得进行处理，如图2-6所示</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014638" data-ratio="0.5717213114754098" data-s="300,640" data-type="png" data-w="976" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6kSTQxAPB8uSRL2ZsibMwicdZfhSjJGKs7J0FIS10jVovWTeHZFm9UecQ/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-6 消息队列解耦</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">按照消息队列的排队方案，我们把整个下单流程调整为异步批量下单链路（图2-7所示） ，在合法校验过后生成订单号提交到databus消息队列 （图2-8所示），再监听databus批量拉取订单进行合并下单（图2-9所示），目前设置的是最多20个一消费，下单结果会在数据库及redis中保存。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014639" data-ratio="0.22870370370370371" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6ebzu5gpHqE7ZCicv32L5FFFmMZVfhYEjnujekT6CQWmuJRicj3DOPnMA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-7异步下单链路</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014637" data-ratio="0.8044692737430168" data-s="300,640" data-type="png" data-w="895" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6hzy1wdjo8BiaeBY4ceCKjTAhzuUgUicngxibxotibPAIhhxalCM8pEjjrg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-8 提交下单请求至mq</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014642" data-ratio="0.6811731315042573" data-s="300,640" data-type="png" data-w="1057" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6O1PNq7NDWgiaOoYVOFuPPiayjbZ12JJgm9xURNzQYNibAujM0GCHVVnPw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>&nbsp; 2-9 从mq消费订单消息</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如图2-10所示，在进入队列后，前端会提示活动火爆，正在努力下单中 ，同时在0~2秒内随机调用下单结果查询接口，轮询30秒（必须设置最大时间兜底，防止无限查询）</p><p style="word-break: break-all;white-space: normal;">对于合并的订单进行批量冻结库存，并行冻结优惠券，批量合并sql插入数据库，最大限度上减少性能消耗&nbsp;</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="1252" data-imgfileid="100014644" data-ratio="2.1658206429780034" data-s="300,640" data-type="png" data-w="591" style="vertical-align: middle;width: 578px;height: 1252px;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754SKTrPBK1h9qEDuwkFjhr9qXgMhuF5xVD12IrAic33lSBMibEMRLm1ZoD8Ktw8pCdZSgTpxEZNxEl6g/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-10 异步下单示例图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">其他优化细节</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">下单限频/限流</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">其中对于一些弱依赖的操作直接进行降级，比如设置商铺关注，缓存手机号，记录操作日志等</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">批量操作异常时（接口超时则fail fast），会分解为单个订单重新进行调用(库存操作会试探单库存扣减 单库存扣减成功 并发请求剩余订单，单库存扣减失败 剩余订单全部置为失败)</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">下单结果查询走redis，异常情况降级为数据库</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">databus异常时，直接降级为同步下单（库存服务也会做限流）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">databus消费者会做幂等及超时判断（订单投递时间跟当前时间差值），超过一定时间会自动抛弃，下单失败&nbsp;</p></li></ol><p style="word-break: break-all;white-space: normal;">经过改造，压测下单支持4000+tps，最终也顺利利用异步下单支撑了早期的拜年祭手办抢购，如图2-11所示</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014643" data-ratio="0.7051909892262488" data-s="300,640" data-type="png" data-w="1021" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA66kkj2Xd1f3Kcaf9gCn98liceWKSrvE4RQa7zQNPjQr8jAXzAjwKK4hw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>2-11&nbsp; &nbsp;活动抢购qps图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>2.3分库分表</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">首先并不是所有表都需要进行切分，主要还是看数据的增长速度。切分后会在某种程度上提升业务的复杂度，避免"过度设计"和"过早优化"。分库分表之前，不要为分而分，先尽力去做力所能及的事情，例如：升级硬件、升级网络、垂直拆分、读写分离、索引优化等等。当数据量达到单表的瓶颈时候，再考虑分库分表。&nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">数据量过大的风险如下：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1）高负载下主从延迟严重，影响用户体验，并且对数据库备份，如果单表太大，备份时需要大量的磁盘IO和网络IO。例如1T的数据，网络传输占50MB时候，需要20000秒才能传输完毕，整个过程的风险都是比较高的</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2）对一个很大的表进行DDL修改时，MySQL会锁住全表，这个时间会很长，这段时间业务不能访问此表，影响很大。如果使用pt-online-schema-change，使用过程中会创建触发器和影子表，也需要很长的时间。在此操作过程中，都算为风险时间。将数据表拆分，总量减少，有助于降低这个风险。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3）大表会经常访问与更新，就更有可能出现锁等待，一旦出现慢查询，风险很大，容错性很低。将数据切分，用空间换时间，变相降低访问压力，而且利用水平切分，当一个数据库出现问题时，不会影响到100%的用户，每个库只承担业务的一部分数据，这样整体的可用性就能提高&nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">这里我们明确下分库 分表到底能解决什么问题</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">分表：解决单表过大导致的查询效率下降(海量存储,即使索引正确也会很慢) MySQL 为了提高性能，会将表的索引装载到内存中。InnoDB buffer size 足够的情况下，其能完成全加载进内存，查询不会有问题。但是，当单表数据库到达某个量级的上限时，导致内存无法存储其索引，使得之后的 SQL 查询会产生磁盘 IO，从而导致性能下降。当然，这个还有具体的表结构的设计有关，最终导致的问题都是内存限制。这里，增加硬件配置，可能会带来立竿见影的性能提升。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">分库：解决Master服务器无法承受读写操作压力(高并发访问,吞吐量)&nbsp;</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在2020年的时候，会员购随着业务发展，订单数据快速增长，基本每半年数据量就会翻倍，所有核心表均达到千万级别 大表的DDL，查询效率，健壮性都有问题 ，并且高负载下，会有较为明显的主从延迟，影响到用户体验。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">首先是技术选型：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">站在巨人的肩膀上能省力很多，目前分库分表已经有一些较为成熟的开源解决方案：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">阿里的TDDL，DRDS和cobar</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">开源社区的sharding-jdbc（3.x开始已经更名为sharding-sphere）</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">民间组织的MyCAT</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">360的Atlas</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">美团的zebra&nbsp;</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">这么多的分库分表中间件全部可以归结为两大类型：CLIENT模式 PROXY模式</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">无论是CLIENT模式，还是PROXY模式。几个核心的步骤是一样的：SQL解析，重写，路由，执行，结果归并。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">经过讨论大家更倾向于CLIENT模式，架构简单，性能损耗较小，运维成本低，而且目前部分项目中都已经被引入shardingjdbc，并且部分模块已经在使用其分库分表功能，网上文档丰富，框架比较成熟 。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>选择sharding key：</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">sharding column的选取是很重要的，sharding column选择的好坏将直接决定整个分库分表方案最终是否成功。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">sharding column的选取跟业务强相关，选择sharding column的方法最主要分析你的API流量，优先考虑流量大的API，将流量比较大的API对应的SQL提取出来，将这些SQL共同的条件作为sharding column 例如一般的OLTP系统都是对用户提供服务，这些API对应的SQL都有条件用户ID，那么，用户ID就是非常好的sharding column。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">非sharding column查询该怎么办？&nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1. 建立非sharding column属性到sharding column的映射关系 &nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2. 双写冗余全量数据(不需要二次查询)</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3. 数据异构（TIDB，ES，HIVE等，应对复杂条件查询，近实时或离线查询） &nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">4. 基因融合（比如订单号里融合mid基因，最新的订单号规则：orderId+mid%512 比如4004164057659338）&nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>切分策略：</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.范围切分</p><p style="word-break: break-all;white-space: normal;">比如按照时间区间或ID区间来切分，如图3-1所示，优点：单表大小可控，天然水平扩展。缺点：无法解决集中写入瓶颈的问题。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014645" data-ratio="0.3638888888888889" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6SV4JN563cOOWfibRHI7CMeEkgCZtqjcYskwQFEh7bgQEY7YDvrqnIlA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>3-1 范围切分</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.Hash切分</p><p style="word-break: break-all;white-space: normal;">如图3-2所示，如果希望一劳永逸或者是易于水平扩展的，还是推荐采用mod 2^n这种一致性Hash&nbsp;</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014646" data-ratio="0.6287037037037037" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QvOx19pOAgBknEnCVsseA6P5UAGNyhSQNv9PV2lJQ65pTbRMkD3Rib935gtEqBZLJmnTicicRJ3Aeeg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>&nbsp;3-2 Hash切分</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3.会员购交易切分策略</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如图3-3所示，切分键选择：mid 和 order_id相关</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">根据 mid 分表，使用新的orderid 生成规则，orderid 融入（mid%512）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">库表数量：4个集群(主从)，每个集群4个库，每个库16张表，总计256张表</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">库路由策略：mid %16</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">表路由策略：(mid%512)/32</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">公式：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">中间变量 = MID % (库数量*表数量)</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">库路由 = 中间变量 % 库数量</p><p style="word-break: break-all;white-space: normal;">表路由 = 取整(中间变量 /库数量)&nbsp;</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="471" data-imgfileid="100014651" data-ratio="0.8277777777777777" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 478px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754SKTrPBK1h9qEDuwkFjhr9qncia5vhyyED1ndKBDFeia2UygrTu04GG5QsEBqgQNdTfe2k0dyftzLdg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>3-3 库表策略示意图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">我们采用的是不清洗老数据的方式，好处是老的订单数据依然走老库，这样能节省一部分清洗数据的工作量</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>梳理sql：</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">项目中的sql有些是不满足分片条件的，所以我们是要提前梳理项目中的sql的</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.通过 druid 界面 可以统计到所有运行的 sql</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.配合静态扫描sql工具</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3.DBA 拉取 SQL</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">4.人工查看代码 当梳理出对应所有 SQL</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">针对没有分片键的SQL进行改造，不确定的SQL进行验证，不支持的SQL给出处理方式</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">当然如何进行迁移也是很重要的步骤，我们是采用下面的步骤，如图3-4所示</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">历史数据归档，不做迁移，老数据修改依旧路由到老库</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">切读写请求，即将读写流量请求引入到新系统中</p></li><li><p style="word-break: break-all;">回写数据，binlog 监听新数据库回写到老系统中，并进行校验&nbsp;</p></li></ol></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="301" data-imgfileid="100014650" data-ratio="0.5287037037037037" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 305px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754SKTrPBK1h9qEDuwkFjhr9qlzHsEvvqNIdFd0S6nDG4iatRJMs2g9VgziaVDReEdR4neYm5GvzqpSNA/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p><sup>&nbsp;3-4 不停机迁移示意图</sup></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">最后总结下整个分库分表的步骤</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1.根据容量（当前容量和增长量）评估分库分表个数&nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2.选key（均匀）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3.分表规则（hash或range等）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">4.梳理sql并验证</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">5.执行（一般双写） &nbsp;</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;white-space: normal;">在整个交易系统完成分库分表后，彻底解决了数据库的瓶颈问题，历经多次大促压测突发流量等场景都没有出问题，保障了整个平台系统的稳定性。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>3.总结</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">在经过调研链路优化，异步下单改造，数据库分库分表后，整个交易系统的性能得到了较大的提升，也较为顺利得支撑了历次大促活动，后续我们也会继续对一些历史系统（比如票务系统）进行改造升级来提升用户体验。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>你知道在秒杀场景下还有哪些优化方案吗？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>小电视校园系列金属徽章两只</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>2月</strong></span><span style="color: rgb(255, 102, 149);"><strong>6日中午12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014648" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="800" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QvOx19pOAgBknEnCVsseA6ULiaSpYwyATfW13rsYIPG4CXPiawNZIPSA0JarllFExRSoiapia29DqTgQ/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498055&amp;idx=1&amp;sn=74cde1c88a24d13de34164f1185dc321&amp;chksm=cf2f3c62f858b574d9c4e11da035b53133a01ee727b8e8900783088f6a0ea3c9bd73f10f2282&amp;scene=21#wechat_redirect" textvalue="浅谈B站效果广告在线推理服务的性能优化" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">浅谈B站效果广告在线推理服务的性能优化</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247497038&amp;idx=1&amp;sn=1c3af97669f8eb4f481831437e634002&amp;chksm=cf2f306bf858b97db96c00ec504313ac6181768e2ff5d7a64b969d3108936013eef76eacb2fb&amp;scene=21#wechat_redirect" textvalue="常用性能优化手段及在风控系统中的应用" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">常用性能优化手段及在风控系统中的应用</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247496485&amp;idx=1&amp;sn=dbd248489438d5f1b9174960678ac952&amp;chksm=cf2f3600f858bf16560b3c2908fc36ff546ddfb5bc5f821545330441e70dbe5fbf5aab685ebf&amp;scene=21#wechat_redirect" textvalue="直播房间服务基于CQRS的架构演进实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">直播房间服务基于CQRS的架构演进实践</a></p></li></ul></div></div></div></div></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>姜健</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于WebCodecs的网页端高性能视频截帧]]></title>
        <id>2247498279_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498279&amp;idx=1&amp;sn=6b537b59cfb7b03777946de43c50689b&amp;chksm=cf2f3f02f858b614fae703d2fd19e166e87b04af9ac6f48b13d8a333dd34f5da0ce09bfb6770#rd"/>
        <updated>2024-01-30T03:23:34.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 0% 67.6056%;background-repeat: no-repeat;background-size: 115.972%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dvFficbYCibgH0a55Oicv1KSTKLZJ819syhPkTfGobVwAsvFT40xEWicITw/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014605" data-ratio="1.5" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dvFficbYCibgH0a55Oicv1KSTKLZJ819syhPkTfGobVwAsvFT40xEWicITw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>张锋</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩资深开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>业务介绍</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">web投稿页是B站的主要投稿来源，有很多高粉UP主使用web端进行投稿。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">封面部分是投稿过程中耗时占比较高的步骤，因此在过去，web投稿页已上线了自动的封面截取&amp;推荐功能，有效提升了用户体验。同时在此过程中有了一定的技术积累。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">自动封面功能依赖于对用户上传视频进行截帧的能力，最简单的方式是在上传完成之后由服务端进行视频截帧并返回推荐的候选封面，但显然这一步会有大量的等待时间，因此我们采用的是纯前端视频截帧能力。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">实际上在web投稿页有多处需要截帧的地方：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">封面推荐：截取多张低清图在前端进行AI打分，基于打分结果截取最多10张高清图供UP主选择</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">封面选帧：对默认推荐的帧不满意，手动获取准确时间点的帧画面</p></li><li><p style="word-break: break-all;">分区&amp;话题推荐：从视频中截取多帧，打包上传至后台进行分析后返回推荐结果</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014608" data-ratio="0.7444444444444445" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dFxqmuWZbWscNmj45owuY1UBkmLXMauKtMpz4SgKCFI8jM4ojKqVF7w/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014609" data-ratio="0.7129629629629629" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dggXpuibwrpopdPkPkfCnwUavX1J4AhlesanoJTjfEBYbyNPicicBv7HtQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>过去方案</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">过去web投稿页采取两套视频截帧方案，wasm优先，canvas兜底</p></div><div style="text-align: center;" powered-by="xiumi.us"><p><br></p><table resolved=""><colgroup><col><col><col></colgroup><tbody><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><br></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">Video + Canvas</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">WebAssembly + FFmpeg</span></p></td></tr><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">流程</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;" align="left" valign="top"><ul class="list-paddingleft-1"><li style="font-size: 14px;"><p><span style="font-size: 14px;">Video标签 --&gt; 设置video时间</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">canvas context 2d, drawImage()直接成图</span></p></li></ul></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;" align="left" valign="top"><p><span style="font-size: 14px;">FFmpeg API调用+数据传递为主</span></p><ul class="list-paddingleft-1"><li style="font-size: 14px;"><p><span style="font-size: 14px;">视频文件解封装</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">逐个读取关键帧图像数据</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">数据层层传递</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">web端进行图像渲染（webgl / canvas）</span></p></li></ul></td></tr><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">优点</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;" align="left" valign="top"><ul class="list-paddingleft-1"><li style="font-size: 14px;"><p><span style="font-size: 14px;">开发简单：利用浏览器内部的视频播放器能力</span></p></li></ul></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;" align="left" valign="top"><ul class="list-paddingleft-1"><li style="font-size: 14px;"><p><span style="font-size: 14px;">视频支持性好：几乎支持所有市面上可见的视频格式（行业标杆）</span></p></li></ul></td></tr><tr><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;"><p><span style="font-size: 14px;">缺点</span></p></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;" align="left" valign="top"><ul class="list-paddingleft-1"><li style="font-size: 14px;"><p><span style="font-size: 14px;">无法进行错误处理，有时会黑屏，但不报错</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">不同浏览器有形态各异的表现，速度和可用性难以保证</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">播放器本身的缓存或预加载等机制带来性能浪费</span></p></li></ul></td><td colspan="1" rowspan="1" style="border-color: rgb(193, 199, 208);padding-top: 7px;padding-bottom: 7px;vertical-align: top;min-width: 8px;word-break: break-all;" align="left" valign="top"><ul class="list-paddingleft-1"><li style="font-size: 14px;"><p><span style="font-size: 14px;">性能损耗大：相比canvas截帧慢；</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">内存消耗大：早期的wasm功能甚至会导致页面崩溃；</span></p></li><li style="font-size: 14px;"><p><span style="font-size: 14px;">开发门槛高，需要了解ffmpeg lib的使用方式，要写C代码，需要手动构建各类基础库</span></p></li></ul></td></tr></tbody></table></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">现状：截帧成功率97%左右，封面推荐耗时（去掉极端数据）</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">平均：8.4s</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">50分位：16s</p></li><li><p style="word-break: break-all;">90分位：19s</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>WebCodecs是什么</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">WebCodecs于21年9月份推出，是用于在web页面上对音视频进行底层操纵（如编解码）的API。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">WebCodecs是相对底层的API，准确来说是为有音视频开发基础的人准备的，对前端同学来说有一定的门槛。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在使用FFmpeg时可直接调用包装好的方法，主要门槛在于wasm环境的配置和构建。而使用WebCodecs时则需要基于编解码的原理手动实现功能。或许后续WebCodecs将会推出更加上层的API。</p><p style="word-break: break-all;white-space: normal;">所以在进一步介绍WebCodecs截帧方案之前，我想先介绍一些视频处理的入门知识，感兴趣的可以参考附录中的链接进一步学习。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>MP4的入门知识</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>视频处理的基本概念</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014606" data-ratio="0.13703703703703704" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9d3awBsup3pmxc7f0XKib4XUBIln6OXRDHr1WsIQickQCaicMGXp51icCtwA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">编码/解码：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">视频的编码是将原始的图像信息进行变换压缩等处理，方便传输并保证图像质量。解码则是将压缩后的文件还原成视频需要的一连串图像</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">常见的编码格式：H.265; mpeg4; vp9 ……</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">封装/解封装：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">一个视频文件可能包含多个音频和视频流，通过封装格式将他们聚合在一起，在使用时按照规则逐步解析</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">常见的封装格式：mov,mp4,m4a,3gp,3g2; matroska; flv; avi ……</p></li></ul><p style="word-break: break-all;white-space: normal;"><strong>在这里简单介绍下.mp4文件常用的h264编码以及MP4封装</strong></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>编码-帧内编码（以JPEG图片压缩算法为例）</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">利用人眼的生物特性结合数学方法进行数据压缩，并确保图片质量。主要步骤：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014607" data-ratio="0.31851851851851853" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9d3saic5224PVMaI9icobP1jvmFeOO4FDlq3pmfFczC7U6sZx25k2RKesg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">具体流程在这就不展开了，总之，经过压缩后图片的文件大小将有非常显著的缩小</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014614" data-ratio="0.6666666666666666" data-s="300,640" data-type="png" data-w="936" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9d0l5r6tS8U4A9aD1Xfzt5SRiahG8KGNa0OhHgns192JictBREedJhcU9g/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;" powered-by="xiumi.us"><p>⬇️</p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014613" data-ratio="0.6666666666666666" data-s="300,640" data-type="jpeg" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dicvgD00icuibdIdTu28OyqHJ0AuDViahEPwGv7icgiccSUsI8Y43mSU5icwgw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">原图大小：1620*1080*3/1024/1204 = 4.25MB ----&gt; 编码后大小：856KB</p><p style="word-break: break-all;white-space: normal;">PS：效果仅供参考，两者皆为经过JPEG压缩的图片，只不过压缩比不同</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>编码-帧间编码</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">尽管经过帧内编码的压缩，图片已经有了很明显的体积减少，但存储视频的每一帧是依然是很不明智的行为。因此需要帧间编码。</p><p style="word-break: break-all;white-space: normal;">通常有两种方式进行帧间编码：动态补偿+帧间差异</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>动态补偿</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014611" data-ratio="0.25925925925925924" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9doHN9ibB18qoAZgqFX7puDTiawgGbuQt4l9sDEdlYc2DxAhYv4KKH4FKg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">通常，两个连续的帧之间是存在相同部分的，只是位置发生了变化因此可以通过存储 块的索引 + 偏移量（向量）以减少存储体积</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>帧间差异</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">仅有动态补偿还不够还原每一帧的画面，还需要通过两帧之间的diff帧来辅助还原</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014610" data-ratio="0.5653846153846154" data-s="300,640" data-type="png" data-w="520" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dNPIF9Ezicbc5BhG43GR6ywwHQxXAmgxoqhNef1VND8mTXqWOibZ4QkicQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">diff帧的画面通常信息量比较低，因此通过帧内压缩会获得很高的压缩比</p><p style="word-break: break-all;white-space: normal;">使用这两种方法，结合上一帧参考帧，便可以获得当前帧了</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014612" data-ratio="0.43333333333333335" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dumbGDGvBmUlZkLWKUgicWyVib8vOAdiawmRR9F3gLcCJsp2GwFWbLwEhw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>不同的帧类型</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">对应的，产生了三种帧类型</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">I 帧：俗称的关键帧，仅使用了帧内编码，可以被独立还原为图像</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">P帧：帧的图像还原依赖前一帧的解码结果</p><p style="word-break: break-all;white-space: normal;">B帧：帧的图像还原依赖前一帧与后一帧的解码结果</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014618" data-ratio="0.6472222222222223" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dCL9nxNPEpl7ZDcw2sZUCC6TfjpRr5uVbFOepyYK4wiaEJL1tKiawy3OA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">帧的展示顺序与解码顺序可能是不一样的</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>封装</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">MP4封装文件基本结构：所有数据存放在box中</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014617" data-ratio="0.25277777777777777" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dEDOHVpxAu4Wqnzc9VjO3B8CY9cvOs52kIqcXhSD5O5BdpDICZVkzQQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>WebCodecs截帧方案</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">设想一个问题：只使用一个编程语言的基本API，如何<strong>最高效</strong>地获取一个.mp4文件中的某一个时间点所在的图像？</p><p style="word-break: break-all;white-space: normal;">在了解了上面的基本知识后，我们可以分4步解决这个问题：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014615" data-ratio="0.075" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dSGm4JUDLGERmduU8sjCqwQZkw3PVoODmMqsl5OJE8CtJX0ibsnBepog/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">不同于播放器：截帧不需要预解码缓存等步骤。为了保证<strong>性能</strong>，需要多少数据拿多少，拿多少处理多少，避免多余的文件读取和解析造成性能和内存的浪费。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;元数据读取&amp;解析</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">1. 读取文件头部8byte的数据，按照box的header规则逐个获取各box的位置以及大小</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014616" data-ratio="0.32592592592592595" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9d3BJ3XC1bIiaEXUHFzGrUicIeM13ibLu2yvCqKosNNzASjHVGyxwe1k2qA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">PS：moov可能在文件的末尾，顺序不固定</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2. 将moov box所在文件块切片，提供给解封装器解析，获取到：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">该视频的详细编码参数</p></li><li><p style="word-break: break-all;">所有帧的索引信息</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014619" data-ratio="0.8759259259259259" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9duXicrl5XxWbtNlWsbgOJysGKJy8EeBkO9mW2IBp33Vp9mJIHNtHPibbw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>寻帧</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">策略：帧的时间戳并不是连续的的 → 某个时间点对应的帧可能并不存在 → 使用距离最近的帧</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014622" data-ratio="0.35185185185185186" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dhw34iaxBmmbjibdOKaL2qqluWKLtRRiaPm2eGTeJoI4jV5IohpGs8ib6AQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">获取到最近的关键帧和非关键帧之后，则要根据截帧的需求提供不同的文件块给解码器解码</p><p style="word-break: break-all;white-space: normal;">只提供关键帧速度更快，适合精度不高的场景（封面推荐），准确截帧适合精度要求高的场景（封面选帧）</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>整体过程</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">由于解封装器(mp4box.js)和解码器(WebCodecs-VideoDecoder)本身为流式设计，优先服务于流式的应用场景（如直播视频流，点播视频流，需要通过网络请求分块获取到文件内容）。而视频截帧是一个本地场景，已经有了完整的文件。且视频截帧的API最好是类似同步的方式，在一个方法调用中完成所有的帧截取，并一起返回。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">因此设计了通过事件抛出以及定时器机制以达到对内部流式依赖库的包装。</p><p style="word-break: break-all;white-space: normal;">同时将计算密集的解封装、解码、渲染工作挡在独立的web worker中执行，确保宿主页面运行流畅不受影响。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014624" data-ratio="0.3574074074074074" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dcYvLEic4Hib16jO25HFlDKMVxEugvibVtLHQwuWRbdWA4HtNKOtRUbDAg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>性能分析</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>本地测试：</strong></p><p style="word-break: break-all;white-space: normal;">测试机上模拟了web投稿页场景，对WebCodecs / WebAssembly / Canvas 三种截帧方式的性能进行了测试。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014623" data-ratio="0.17407407407407408" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dfYxxsN3xRpgLzM9IibcXlNhJibmUnb50rRy8cM5LhNKOrRMCh12hEO3w/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">测试样本：720p视频2个，1080p视频3个，2k视频1个，4k视频3个</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">测试环境：2020 M1 MacBook pro, 公司测试windows本（i5-1135G7 1.38~2.40GHz）</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">测试方式：在不同测试机上对每个视频跑三次测试用例，共81次</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">测试用例：模拟web投稿页截帧流程，数量，分辨率保持相同</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">实际场景中：视频的编码，分辨率，压制参数等都会对截帧性能有影响，在这里以分辨率进行粗略的分类</p><p style="word-break: break-all;white-space: normal;"><strong>线上数据：</strong></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014621" data-ratio="0.10462962962962963" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9d3TaYNQWBkrKzTicIH1NN6beLPIrIrzmr6ibtVPopw9xrQsOianQdZ3QFg/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014620" data-ratio="0.09537037037037037" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dsfYJ3Cnra7HBniake4Hz7X0XHhQXxibDBYsSYkclnXqVHmXliaFx0F0lA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>总结：</strong></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">随着视频规格的提升，webcodecs的截帧速度为wasm和canvas的 2.5~5 倍</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">提前 3~13s 完成页面所需的截帧任务，用户能够更快的看到推荐结果</p></li><li><p style="word-break: break-all;">在内存消耗上有一定的降低</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>WebCodecs截帧方案的优点&amp;缺点</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>优点</strong></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">速度很快，受视频规格影响小</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">读取文件少</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">内存占用有一定降低，且表现稳定</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>缺点</strong></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">依赖解封装器的实现，当前使用了mp4box.js作为解封装器，约能覆盖95%的视频</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">目前仅mp4和webm的解封装器较完善</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">WebCodecs浏览器支持性一般，当前为85%左右</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>规划</strong></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">作为web投稿页首选截帧方式，根据线上表现做进一步优化</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">其他封装格式的视频支持：支持webm封装格式（已支持，且开源了mkv demuxer）</p></li><li><p style="word-break: break-all;">开源</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>附录</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">jpeg压缩算法介绍：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">我站：<span style="color: rgb(12, 182, 242);">https://www.bilibili.com/video/BV1TZ4y1S7iG</span></p></li><li><p style="word-break: break-all;margin-bottom: 15px;">知乎：<span style="color: rgb(12, 182, 242);">影像算法解析——JPEG 压缩算法 - 知乎（https://zhuanlan.zhihu.com/p/40356456）</span></p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">视频编码介绍：<span style="color: rgb(12, 182, 242);">https://www.youtube.com/watch?v=QoZ8pccsYo4</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">不同的帧类型：<span style="color: rgb(12, 182, 242);">I, P, and B-frames - Differences and Use Cases Made Easy - OTTVerse（https://ottverse.com/i-p-b-frames-idr-keyframes-differences-usecases）</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">codec string的含义（[avc1.4d0033]代表什么）：<span style="color: rgb(12, 182, 242);">Codecs in common media types - Web media technologies | MDN（https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#using_the_codecs_parameter）</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">MP4封装类型介绍：<span style="color: rgb(12, 182, 242);">mp4封装格式各box类型讲解及IBP帧计算 - 知乎（https://zhuanlan.zhihu.com/p/457888765）</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在线MP4解析工具：<span style="color: rgb(12, 182, 242);">Online Mp4 Parser（https://www.onlinemp4parser.com/）</span></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">WebCodecs官方说明：<span style="color: rgb(12, 182, 242);">WebCodecs（https://w3c.github.io/webcodecs/#videodecoder-interface）</span></p><p style="word-break: break-all;white-space: normal;">WebCodecs代码示例：<span style="color: rgb(12, 182, 242);">https://github.com/w3c/webcodecs</span></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>WebCodecs在Web前端的应用或者Web前端的音视频处理场景？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>小电视校园系列金属徽章两只</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>2月2日中午12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014626" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="800" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754TqSdq2iaAoJ5lH60sPNWK9dlhXzI2hFDnNFSeEH3W9JcRCiaCh2Kvc9X7mFfuIuoqSuiaVjZAictnNTQ/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;">WebCodecs 开启 Web 音视频新篇章</p></li><li><p style="margin-bottom: 15px;">Web 端实时防挡脸弹幕（基于机器学习）</p></li><li><p>猫耳 Android 播放框架开发实践</p></li></ul></div></div></div></div></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile><br></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>张锋</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[游戏全球发行提效-- 发行 iOS SDK的自动化接入探索]]></title>
        <id>2247498252_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498252&amp;idx=1&amp;sn=540a2bfdf2a0b162e54c7c15967fd71b&amp;chksm=cf2f3f29f858b63f1e1832f9c21f4d62a2776e778d0a982317d928791a5533681ebde7093fe5#rd"/>
        <updated>2024-01-25T10:53:45.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 9.85225% 58.5414%;background-repeat: no-repeat;background-size: 195.156%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754St2icD0Diagn9b083WAPeePmqyIxMP7iafjdtN7esIDo1eR3pbPJK3cS7aOI8DQ44ExFJP1yKZycwyw/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014591" data-ratio="1.5435185185185185" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754St2icD0Diagn9b083WAPeePmqyIxMP7iafjdtN7esIDo1eR3pbPJK3cS7aOI8DQ44ExFJP1yKZycwyw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>徐晨晨</p></div><div style="margin-top: 5px;text-align: justify;font-size: 14px;"><p style="text-align: center;white-space: normal;">哔哩哔哩高级开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>1、前言</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">游戏SDK作为游戏技术中台赋能游戏研发的核心产品之一，其核心能力包括账号、交易、合规（实名、防沉迷），以及社交、营销等能力。为游戏开发者提供了便捷的方式快速完成底层业务能力的搭建，降低开发和维护的难度。帮助游戏研发更专注于游戏内容的创作，缩短游戏研发周期的同时保障游戏的安全性合规性。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>2、背景</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><br></p><div style="line-height: 1.6;font-size: 16px;"><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">为了更有效的满足不同地区市场的策略和法规要求，为不同地区提供符合当地玩家喜好的游戏体验，哔哩哔哩游戏在发行上采取差异化的运营和推广策略。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">游戏在发行中会按地区和主体分包发行，我们将游戏的主体和地区发行方案称为发行计划。</p><p style="word-break: break-all;white-space: normal;">游戏SDK作为游戏的底层业务支撑，为了适配游戏的发行计划，也提供了与之对应的游戏SDK。</p></div></div><p style="word-break: break-all;white-space: normal;"><br></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="182" data-imgfileid="100014588" data-ratio="0.49537037037037035" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 286px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmnt0L1icibXe8wfkl4ANFyJlOo9VnZiabjm7xrtvL7g5Mhicf4Slx66hsiaw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">随着游戏业务的发展，游戏SDK的数量也不断增加。在保障游戏业务发展的同时，我们整合了所有海外发行的SDK，游戏在海外发行中不需要根据发行地区接入对应的地区包，只需要接入全球版游戏SDK即可。</p><p style="word-break: break-all;white-space: normal;">这在很大程度上提高了游戏海外发行的效率，但并非最优解，在高效支持游戏差异化发行的同时，我们一直在思考如何更好的提升全球化发行效率。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>3、定个小目标</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">基于当前的游戏业务情况，我们设想了一个比较理想的SDK接入情景：</p><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">&nbsp;<strong>一次接入，全球适配</strong>：我们希望游戏只需接入一次SDK API，就能够轻松实现全球范围的适配工作。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;"><strong>即拿即用，无需配置</strong>：研发无需配置游戏SDK所需要的参数，由工具自动化完成SDK的配置工作。</p></li></ol><p style="word-break: break-all;white-space: normal;">在当前游戏分主体地区运营策略下，如果能整合所有SDK的接入并且简化接入步骤的话，这对游戏的接入提效无疑是巨大的。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>4、 方案选择</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>1、重构现有游戏SDK，合并所有SDK</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在过往的游戏业务中，我们一度维护超过20款SDK。经过两次业务重构后，SDK已缩减为6个。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">由于国服和海外服的业务差异和合规要求，以及发行主体间的合规要求，SDK已无法再缩减。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在当前游戏的全球化发行的路程中，最好情况只需要接入两个SDK，但不能排除接多个SDK的情况。</p><p style="word-break: break-all;white-space: normal;">在当前政策和历史技术的要求下，合并所有SDK已然不是一条能走通的路。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>2、在游戏SDK的上层设计聚合SDK，</strong></p><p><strong>通过出包工具自动化接入</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">聚合SDK在游戏行业是比较常见的业务模式，在安卓发行中较为常见，它可以帮助开发者减少对接华为、小米、应用宝等渠道SDK的研发成本。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在我们的业务场景中，聚合SDK的任务是统一bilibili游戏业务中的各个游戏SDK，在产品上输出聚合SDK供游戏研发接入。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">聚合SDK会根据游戏的发行计划在内部完成相应游戏SDK的接入和调度，原有的游戏SDK则退居二线，研发无需感知具体接入的游戏SDK。</p><p style="word-break: break-all;white-space: normal;">聚合SDK完成所有游戏SDK的功能合并，对外提供统一的API。在游戏完成API接入后，由打包工具完成底层游戏SDK的接入和配置。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>5、如何做？</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>5.1、OneSDK统一API</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">虽然各游戏SDK在业务逻辑上处理方案不一致，但对外提供的业务能力大致类似，比如账号体系、支付能力、客服、广告归因等能力都是通用的。这给顶层的聚合SDK——OneSDK的开发提供了先决条件。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在顶层设计上，OneSDK最大可能的合并和简化各个游戏SDK的参数差异，统一各个SDK的API定义，给游戏提供统一全面的API接口。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在业务分工中，OneSDK不直接参与游戏业务，在顶层API和底层业务SDK中充当桥接作用，当调用OneSDK API时，通过AdapterProtocol寻找可以响应API的游戏业务Adapter。</p><p style="word-break: break-all;white-space: normal;">实际游戏SDK业务调用的工作在Adapter层面完成，每个游戏SDK有自己的Adapter，Adapter根据游戏SDK的特性完成参数的转换和适配，最终调用到实际的游戏业务中。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014590" data-ratio="0.8657407407407407" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmK39ALURvDQug1mnrnyLTcAXlk7n8xT7G24ftVESuvpm8We5tTrSSmA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">后续游戏在SDK的接入过程中，只需要接入OneSDK即可完成全球范围的发行适配工作，无需感知底层游戏SDK。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">我们通过OneSDK完成了的各游戏SDK的聚合，在API层面上完成了统一。但Xcode工程的接入配置中，还是需要实际接入对应的主体游戏SDK，SDK所需要配置仍然是需要的。</p><p style="word-break: break-all;white-space: normal;">如何帮助游戏快速完成底层游戏SDK的接入配置，是我们下一步需要思考的事情。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>5.2、打包工具实现自动化接入</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在接入OneSDK后，在API层面上已经无需感知底层SDK，在配置上我们也需要有相应方案帮助游戏避免繁复的SDK配置工作。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">既然SDK接入配置无法避免，我们决定设计一款打包工具，通过脚本替代人工完成所有SDK的配置和接入工作。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在安卓中有着和iOS平台上类似的场景，在安卓中有多渠道发行的场景，一套代码需要发行谷歌、华为、小米、应用宝等不同的渠道。</p><p style="word-break: break-all;white-space: normal;">对于这种情况安卓游戏SDK可以使用官方提供的APKTool工具，反编译替换SDK文件后，再回编译生成各个渠道包。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014589" data-ratio="0.5305555555555556" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmccpnwrT5sn2icv8KzO4fWmqQ5Ub9Uq0ic90hkOK5bcMPRHU84Av2O3xg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">那边iOS可否像安卓一样修改母包IPA，替换相关代码和资源文件最终生成新的IPA包呢？</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">很遗憾，这种方法是不可靠的。iOS没有像谷歌一样官方提供的APKTool工具，来执行反编译和回编译的能力。</p><p style="word-break: break-all;white-space: normal;">要想在iOS实现一套代码自动完成多渠道发行的打包，我们可以比安卓更早一步介入打包的流程中。<br>安卓是在源码编译成APK包体后介入打包的，我们可以在源码阶段介入，通过修改Xcode工程的方式，完成多渠道包的自动化接入。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>5.2.1、打包工具设计</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">考虑到游戏的Xcode工程动辄几十G的大小，上传下载十分耗时，以及游戏研发对源码工程泄露的担忧。打包工具在产品形式上以MacOS端的应用交付给游戏研发使用，在本地完成游戏的打包工作。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">简而言之，打包工具的主要功能是在完成鉴权后，获取与发行计划对应的打包计划，然后根据该计划完成OneSDK下层的游戏SDK接入和配置。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在应用层面，（被苹果原生MacOS开发框架短暂折磨过之后）我们选择对客户端开发更为亲近的Flutter作为框架，对于轻量级的应用，Flutter统一的API体验、热重载等特性可以帮助我们快速完成应用的搭建。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在偏底层工作的Xcode工程编辑上，Flutter没有十分稳定的类库可以完成Xcode工程的编辑工作，但可以调用脚本完成前述工作。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">脚本所要做的工作，可以简单归纳成以下步骤：</p><p style="word-break: break-all;white-space: normal;">1. 删除游戏SDK文件夹以及里面的内容<br>2. 导入新的游戏SDK文件<br>3. 修改Info.plist文件，添加业务参数<br>4. 修改build-settings，添加指定编译指令<br>5. 导入游戏SDK所依赖的系统库</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="710" data-imgfileid="100014592" data-ratio="1.2447013487475915" data-s="300,640" data-type="png" data-w="1038" style="vertical-align: middle;width: 578px;height: 719px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmNrOOv5Fr9lATKv338JWe5d4oSMOX9VbtghiaTibbxJBc7FUJvX5nxgGA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在脚本框架上，我们使用Xcodeproj模拟在Xcode界面完成的代码、资源的删除&amp;替换操作</p><p style="word-break: break-all;white-space: normal;">Xcodeproj是一个常用的修改Xcode工程的Ruby框架，由我们熟知的Cocoapods团队开发。其内部完整映射了project.pbxproj的Object类型及其对应的属性。将Xcode项目文件解析成一个抽象语法树（AST），通过遍历语法树来获取项目配置信息，并提供相应的API来修改和管理这些信息。通过代码来添加、删除、修改项目中的文件、依赖、编译选项等，以达到自动化接入的目的。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>5.2.2 project.pbxproj 介绍</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">要想通过脚本修改Xcode工程，我们先要了解project.pbxproj文件。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">project.pbxproj被包装在xcodeproj文件中，存储着Xcode中所有能看见的公共配置信息。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">换句话说，我们可以通过修改project.pbxproj来实现我们在Xcode中可以修改的配置。</p><p style="word-break: break-all;white-space: normal;">相信很多人都有因为代码冲突而手动修改过project.pbxproj，也为project.pbxproj繁杂的内容感到眼花缭乱。这是因为project.pbxproj文件的可读性较差且内容较多。实际上project.pbxproj有固定的结构和格式，了解大致结构和分类用途就会对其认知更清晰，project.pbxproj的总体结构如下所示：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><strong>project.pbxproj结构</strong></p></div><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// !$*UTF8*$!</span></span></code><br><code><span class="code-snippet_outer">{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;archiveVersion = <span class="code-snippet__number">1</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;classes = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;};</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;objectVersion = <span class="code-snippet__number">46</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;objects = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;}</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;rootObject = E6A557831C22979700A81AD5 <span class="code-snippet__comment">/* Project object */</span>;</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在project.pbxproj我们需要关注的是objects的内容，一般来说，工程越大越复杂，objects的内容就会越多。objects里面实际上是一个元素的Map, 每个Key用一个全文档唯一的uuid来表示。</p><p style="word-break: break-all;white-space: normal;">objects中包含了多个Section, 也就是多种类型的信息。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__comment">// !$*UTF8*$!</span></span></code><br><code><span class="code-snippet_outer">{</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;archiveVersion = <span class="code-snippet__number">1</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;classes = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;};</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;objectVersion = <span class="code-snippet__number">56</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;objects = {</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* Begin PBXBuildFile section */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;XXXXXXXXXXXXXXXXXXXXXXXXXXX <span class="code-snippet__comment">/* AppDelegate.m in Sources */</span> = {isa = PBXBuildFile; fileRef = <span class="code-snippet__number">880B</span>73262AE53EFB00027A9F <span class="code-snippet__comment">/* AppDelegate.m */</span>; };</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* End PBXBuildFile section */</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* Begin PBXFileReference section */</span></span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* End PBXFileReference section */</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* Begin PBXFrameworksBuildPhase section */</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* End PBXFrameworksBuildPhase section */</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* Begin PBXGroup section */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880B</span>73192AE53EFB00027A9F = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;isa = PBXGroup;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;children = ( &nbsp; &nbsp;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;XXXXXXXXXXXXXXXXXXXXXXXX* DEMO */,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880B</span>73232AE53EFB00027A9F <span class="code-snippet__comment">/* Products */</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sourceTree = <span class="code-snippet__string">"&lt;group&gt;"</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;};</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* End PBXGroup section */</span></span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* Begin PBXNativeTarget section */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880B</span>73212AE53EFB00027A9F <span class="code-snippet__comment">/* DEMO */</span> = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;isa = PBXNativeTarget;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;buildConfigurationList = <span class="code-snippet__number">880B</span>733B2AE53EFC00027A9F <span class="code-snippet__comment">/* Build configuration list for PBXNativeTarget "DEMO" */</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;buildPhases = (</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880B</span>731E2AE53EFB00027A9F <span class="code-snippet__comment">/* Sources */</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880B</span>731F2AE53EFB00027A9F <span class="code-snippet__comment">/* Frameworks */</span>, &nbsp; &nbsp;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;XXXXXXXXXXXXXXXXXXXXXXXX <span class="code-snippet__comment">/* Resources */</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;buildRules = (</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dependencies = (</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name = DEMO;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;productName = DEMO;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;productReference = <span class="code-snippet__number">880B</span>73222AE53EFB00027A9F <span class="code-snippet__comment">/* DEMO.app */</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;productType = <span class="code-snippet__string">"com.apple.product-type.application"</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;};</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__comment">/* End PBXNativeTarget section */</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;};</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;rootObject = <span class="code-snippet__number">880B</span>731A2AE53EFB00027A9F <span class="code-snippet__comment">/* Project object */</span>;</span></code><br><code><span class="code-snippet_outer">}</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以上是obejcts的简化数据内容，它包含了许多我们在Xcode中经常会用到的配置内容</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1. &nbsp;PBXProject：&nbsp;<br>&nbsp; &nbsp; - 代表整个 Xcode 项目。<br>&nbsp; &nbsp; - 包含项目的全局配置和设置，如项目名称、项目根目录、构建配置等。<br>&nbsp; &nbsp; - 包含了项目中的所有 `PBXNativeTarget` 的列表。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">2. &nbsp;PBXNativeTarget：<br>&nbsp; &nbsp; - &nbsp; 代表一个构建目标，可以是应用程序、库或其他可执行文件。<br>&nbsp; &nbsp; - &nbsp; 包含了该目标的具体配置，如编译器选项、输出路径、依赖关系等。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">3. &nbsp;PBXFileReference：<br>&nbsp; &nbsp; - &nbsp; 代表项目中的文件或文件夹。<br>&nbsp; &nbsp; - &nbsp; 包含文件的路径、文件类型、引用等信息。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">4. &nbsp;PBXGroup：<br>&nbsp; &nbsp; - &nbsp; 用于组织项目中的文件和文件夹，以创建项目的文件结构。<br>&nbsp; &nbsp; - &nbsp; 可以包含 `PBXFileReference` 和其他 `PBXGroup`。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">5. &nbsp;PBXBuildFile：<br>&nbsp; &nbsp; - &nbsp;描述编译阶段的文件引用，包括源文件(.m)和资源文件(xib或者storyboard).</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">6.&nbsp;PBXBuildPhase:<br>&nbsp; &nbsp; - 描述编译阶段. 是一个抽象概念，实际出现的是下面具体的项目；BuildPhase对应的是Xcode图形化界面上的Build Phase配置.<br>&nbsp; &nbsp; - PBXCopyFilesBuildPhase: 拷贝文件阶段.PBXFrameworksBuildPhase: Framework编译阶段<br>&nbsp; &nbsp; - PBXHeadersBuildPhase: 头文件编译阶段.<br>&nbsp; &nbsp; - PBXResourcesBuildPhase: 资源文件拷贝编译阶段.<br>&nbsp; &nbsp; - PBXShellScriptBuildPhase: 脚本执行阶段.<br>&nbsp; &nbsp; - PBXSourcesBuildPhase: 源文件编译阶段.</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">7. &nbsp;PBXContainerItemProxy：<br>&nbsp; &nbsp; - &nbsp; 用于管理依赖关系和跨项目引用，通常在多项目工程中使用。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">8. &nbsp;XCBuildConfiguration：<br>&nbsp; &nbsp; - &nbsp; 包含特定构建配置的设置，如编译器选项、链接选项等。<br>&nbsp; &nbsp; - &nbsp; `XCBuildConfiguration` 对象通常属于 `PBXNativeTarget`。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">9. &nbsp;XCConfigurationList：<br>&nbsp; &nbsp; - &nbsp; 用于管理构建配置列表，每个 `PBXNativeTarget` 都有一个 `XCConfigurationList</p><p style="word-break: break-all;white-space: normal;">这些内容在Xcode界面中有与之类似的配置项，命名也大多近似。针对这些Section修改可以完成Xcode配置项的修改，但需要注意将所有影响项一同修改完毕，否则很容易就会导致工程文件错误。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>5.2.3、脚本操作之增删改查</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在我们脚本操作的第一步是旧SDK包体的删除和新的SDK包体的导入。这些文件的增删、配置的修改都是基于Target修改的，在project.pbxproj中我们修改的是PBXNativeTarget Section。</p><p style="word-break: break-all;white-space: normal;">以下是PBXNativeTarget文件结构</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="white-space: normal;"><strong>PBXNativeTarget结构</strong></p></div><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__number">880288</span>D929013C8100802937 <span class="code-snippet__comment">/* OneSDKDemo */</span> = {</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;isa = PBXNativeTarget;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;buildConfigurationList = <span class="code-snippet__number">880288F</span>329013C8300802937 <span class="code-snippet__comment">/* Build configuration list for PBXNativeTarget "OneSDKDemo" */</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;buildPhases = (</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880288</span>D629013C8100802937 <span class="code-snippet__comment">/* Sources */</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880288</span>D729013C8100802937 <span class="code-snippet__comment">/* Frameworks */</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__number">880288</span>D829013C8100802937 <span class="code-snippet__comment">/* Resources */</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;buildRules = (</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;dependencies = (</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;);</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;name = OneSDKDemo;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;productName = OneSDKDemo_GSO;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;productReference = <span class="code-snippet__number">880288</span>DA29013C8100802937 <span class="code-snippet__comment">/* OneSDKDemo.app */</span>;</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;productType = <span class="code-snippet__string">"com.apple.product-type.application"</span>;</span></code><br><code><span class="code-snippet_outer">};</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以上面文件为例，要增删Framework，我们就要去修改UUID为880288D729013C8100802937的PBXFrameworksBuildPhase Section，而要增删bundle、图片等资源文件，我们就要修改UUID为880288D829013C8100802937的PBXResourcesBuildPhase。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">以删除SDK为例，脚本会去遍历SDK文件夹内的所有内容，然后将其根据文件类型分别在不同的PBXBuildPhase中移除引用，随后删除文件。</p><p style="word-break: break-all;white-space: normal;">需要注意的是：Unity游戏导出的工程有两个Target，代码挂载在UnityFramework Target上，图片等资源文件则是挂载在主Target上。我们在处理Unity工程的时候要区分Target操作。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="white-space: normal;"><strong>删除SDK</strong></p></div><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"><span class="code-snippet__function">def <span class="code-snippet__title">delete_group</span><span class="code-snippet__params">(group)</span></span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;group.files.each <span class="code-snippet__keyword">do</span> |file|</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> file.real_path.to_s.end_with?<span class="code-snippet__params">(<span class="code-snippet__string">'.m'</span>, <span class="code-snippet__string">'.mm'</span>, <span class="code-snippet__string">'.cpp'</span>, <span class="code-snippet__string">'.h'</span>, <span class="code-snippet__string">'.swift'</span>)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;@code_target.source_build_phase.<span class="code-snippet__title">remove_file_reference</span><span class="code-snippet__params">(file)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__title">delete_path</span><span class="code-snippet__params">(file.real_path)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;file.remove_from_project</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;elsif file.real_path.to_s.end_with?<span class="code-snippet__params">(<span class="code-snippet__string">'.a'</span>)</span> || file.real_path.to_s.end_with?<span class="code-snippet__params">(<span class="code-snippet__string">'.framework'</span>)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;@code_target.frameworks_build_phases.<span class="code-snippet__title">remove_file_reference</span><span class="code-snippet__params">(file)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__title">delete_path</span><span class="code-snippet__params">(file.real_path)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;file.remove_from_project</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;elsif file.real_path.to_s.end_with?<span class="code-snippet__params">(<span class="code-snippet__string">'.plist'</span>, <span class="code-snippet__string">'.bundle'</span>)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;@main_target.resources_build_phase.<span class="code-snippet__title">remove_file_reference</span><span class="code-snippet__params">(file)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__title">delete_path</span><span class="code-snippet__params">(file.real_path)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;file.remove_from_project</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;end</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;end</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;group.version_groups.each <span class="code-snippet__keyword">do</span> |child|</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">if</span> child.real_path.to_s.end_with?<span class="code-snippet__params">(<span class="code-snippet__string">'.xcdatamodeld'</span>)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;@main_target.resources_build_phase.<span class="code-snippet__title">remove_file_reference</span><span class="code-snippet__params">(child)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__title">delete_path</span><span class="code-snippet__params">(child.real_path)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;child.remove_from_project</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__keyword">else</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__title">delete_group</span><span class="code-snippet__params">(child, delete_files)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;end</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;end</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;group.groups.each <span class="code-snippet__keyword">do</span> |child|</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp;<span class="code-snippet__title">delete_group</span><span class="code-snippet__params">(child)</span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;end</span></code><br><code><span class="code-snippet_outer"> &nbsp;end</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>5.2.4、脚本操作之参数配置</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">游戏SDK所需要编辑的参数集中在Info.plist中，这里我们使用Ruby的Plist库来执行对plist文件的修改</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">Plist文件采用XML格式存储数据，这种格式可读性比project.pbxproj好多了，我们可以很清晰的知道需要修改文件层级和位置。</p><p style="word-break: break-all;white-space: normal;">下面的代码我们演示了如何在Xcode工程中添加权限描述文案。这些权限和描述文案来自游戏运营在发行平台上的配置，打包工具在打包时会获取最新的配置。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="white-space: normal;"><strong>添加权限文案</strong></p></div><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer"># 增加权限描述字符串</span></code><br><code><span class="code-snippet_outer"><span class="code-snippet__function">def <span class="code-snippet__title">add_app_permissions</span><span class="code-snippet__params">(target_name, permissions)</span></span></span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;<span class="code-snippet__keyword">return</span> <span class="code-snippet__keyword">if</span> permissions.nil?</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"><span class="code-snippet_outer"> &nbsp; &nbsp;plist_full_path </span>= info_plist_path(target_name)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;info = Plist.parse_xml(plist_full_path)</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;permissions.each <span class="code-snippet__keyword">do</span> |key, value|</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="code-snippet__built_in">puts</span> <span class="code-snippet__string">'key : '</span>, key, <span class="code-snippet__string">'value:'</span>, value</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp; &nbsp; &nbsp;info[key] = value</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;end</span></code><br><code><span class="code-snippet_outer"> </span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;Plist::Emit.save_plist(info, plist_full_path)</span></code><br><code><span class="code-snippet_outer">end</span></code><br></pre></p><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">在游戏的自动化出包流程中，打包脚本还有更多的工作，但大多都是使用Xcodeproj和Plist两个工具完成的工作。了解并掌握project.pbxproj的内容和含义，并使用Xcodeproj和Plist对其编辑修改，就可以完成绝大多数Xcode工程修改的工作。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>5.2.5、打包工具概览</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014597" data-ratio="0.9444444444444444" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmrltCMSt23pic24xneq0QAhZa5Vgawap7Nnn5sL4BXq26QHn5VAGbtyw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在整体设计上，打包工具结合游戏发行系统，获取游戏维度的发行计划，研发无需感知游戏SDK所需要配置的参数。</p><p style="word-break: break-all;white-space: normal;">同时打包工具将SDK版本的接入管理归拢至打包工具中，可以根据游戏的运营状态而差异化下发接入SDK的版本。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="386" data-imgfileid="100014596" data-ratio="0.6666666666666666" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 578px;height: 385px;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmK6cO9M9sfSib3tqAevTf3dteLAYVEks9vk69Mj7Xyic3gQDDH9EsBziag/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014595" data-ratio="0.6731481481481482" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754St2icD0Diagn9b083WAPeePmjkI2k2usic77ibI847DtWJy1gk4dmxrA6xctzY3e0M3mic3q9LjvGSIrw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">打包工具在使用上也很简单，游戏研发在登录游戏发行账号后，只需要完成三步配置即可快速完成发行包的接入。</p><p style="word-break: break-all;white-space: normal;">未来后续打包工具会纳入更多契合业务模式的功能，例如接入合规检测、SDK功能自检等功能，持续为游戏的开发提效。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>6、未来规划</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">当前，OneSDK已交付给游戏使用，研发需要接入的SDK从最少2个减少至最多1个。打包工具将在年内上线供研发使用，在结合使用OneSDK和打包工具的情况下，预计可以帮助游戏减少60%的接入耗时。</p><p style="word-break: break-all;white-space: normal;">提高效率是一个不断迭代的过程，未来，我们会站在全球发行的角度，不断完善和丰富OneSDK和打包工具，简化游戏的接入步骤，同时提供更多有用的工具帮助研发提升效率。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><strong>参考文献：</strong></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><em>https://www.rubydoc.info/gems/xcodeproj</em></p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><em>https://github.com/patsplat/plist</em></p><p style="word-break: break-all;white-space: normal;"><em>https://muhuashanjin.github.io/2017/10/09/2017-10-09-Project.pbxproj/</em></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>在开发中，你做过哪些比较有意思的提效工具，达到了什么效果呢？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>小电视校园系列金属徽章两只</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>1月30日中午12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014594" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="800" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754St2icD0Diagn9b083WAPeePmn8AE4FgV7DmaNbuSpgVcSzWG5SJWUg7B5mV9wc2QbE4j0VN3tHRjCw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><div powered-by="xiumi.us" style="margin-top: 5px;margin-bottom: 10px;font-size: 16px;letter-spacing: 0.578px;white-space: normal;text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;"><div style="padding: 5px;display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;"><div powered-by="xiumi.us" style="text-align: justify;color: rgb(12, 182, 242);"><p><strong>往期精彩指路</strong></p></div></div></div><div powered-by="xiumi.us" style="margin-top: 5px;margin-bottom: 10px;font-size: 16px;letter-spacing: 0.578px;white-space: normal;text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;"><div style="padding: 25px;display: inline-block;width: 578px;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);height: auto;"><div powered-by="xiumi.us" style="transform: translate3d(-5px, 0px, 0px);"><div style="padding-right: 8px;padding-left: 8px;text-align: justify;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;width: 511.484px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247497094&amp;idx=1&amp;sn=c6128c3efc29d48ab8c75d6f986f22a9&amp;chksm=cf2f30a3f858b9b5038f2602d94252434a8c9b92e223fcedc6c175f8d206e2b67412aa61fc57&amp;scene=21#wechat_redirect" textvalue="游戏全球发行平台的实践与探索" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">游戏全球发行平台的实践与探索</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247489117&amp;idx=1&amp;sn=c0a269c877633dcc3cc8130c55c67828&amp;chksm=cf2cd378f85b5a6eb543612cfc85856dd1bd88799065478e697062bc60f55ce7f972b7a55901&amp;scene=21#wechat_redirect" textvalue="渠道发行的Android多渠道打包实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">渠道发行的Android多渠道打包实践</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247487748&amp;idx=1&amp;sn=c9cbcacf3bba25b478abf2a0f5c0e75f&amp;chksm=cf2cd421f85b5d37adce8fc782151942912bf38a24be2ebd42b000505bcae60a4833d9a230cd&amp;scene=21#wechat_redirect" textvalue="全链路压测改造之全链自动化测试实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">全链路压测改造之全链自动化测试实践</a><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;"></span></p></li></ul></div></div></div></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><p><br></p></div></div></div><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>徐晨晨</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ClickHouse在B站直播公会业务分析场景的应用实践]]></title>
        <id>2247498234_1</id>
        <link href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247498234&amp;idx=1&amp;sn=ef1ca695f585c4dccbf40abb22c27f49&amp;chksm=cf2f3cdff858b5c9da266784274880f5f56ff60d8a1968010e002ac88190ffd44ee56d9f79a0#rd"/>
        <updated>2024-01-22T13:10:51.000Z</updated>
        <summary type="html"><![CDATA[<div style="line-height: 1.6;font-size: 16px;"><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>本期作者</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 32%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 0% 0.520833%;background-repeat: no-repeat;background-size: 100%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QeLns1nssRRWygWjiahn4ltU5E5t4U8F3elhxdebk8hSbulpeoSIg5IM867CG90DE3AicNn1ljlkNw/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014563" data-ratio="1.4" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QeLns1nssRRWygWjiahn4ltU5E5t4U8F3elhxdebk8hSbulpeoSIg5IM867CG90DE3AicNn1ljlkNw/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div></div><div style="display: inline-block;vertical-align: middle;width: 48%;align-self: center;flex: 0 0 auto;"><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>杨博</p></div><div style="margin-top: 5px;text-align: justify;font-size: 12px;"><p style="text-align: center;white-space: normal;">哔哩哔哩高级开发工程师</p></div></div></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin: 10px 0%;justify-content: center;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: middle;width: 53%;margin-top: 10px;align-self: center;flex: 0 0 auto;height: auto;"><div style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><div style="display: inline-block;"><div style="border-bottom: 1px solid rgb(0, 0, 0);display: inline-block;padding-right: 0.8em;padding-left: 0.8em;color: rgb(0, 0, 0);"><p>王智博</p></div><div style="margin-top: 5px;font-size: 12px;"><p style="text-align: left;">哔哩哔哩资深开发工程师</p></div></div></div></div><div style="display: inline-block;vertical-align: middle;width: 32%;align-self: center;flex: 0 0 auto;height: auto;"><div style="font-size: 32px;margin: 10px 0%;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;overflow: hidden;background-position: 52% 53.6585%;background-repeat: no-repeat;background-size: 139.062%;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QeLns1nssRRWygWjiahn4ltEl8Oic27r7anE0kLc5ue45wCwV9CaCwiaXX0ayz6n7Y3yu9pOhgXNZeQ/640?wx_fmt=jpeg&amp;from=appmsg&quot;);"><p style="width: 100%;height: 100%;overflow: hidden;line-height: 0;"><img data-imgfileid="100014562" data-ratio="1.3333333333333333" data-s="300,640" data-type="jpeg" data-w="1080" style="width: 100%;height: 100%;opacity: 0;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QeLns1nssRRWygWjiahn4ltEl8Oic27r7anE0kLc5ue45wCwV9CaCwiaXX0ayz6n7Y3yu9pOhgXNZeQ/640?wx_fmt=jpeg&amp;from=appmsg"></p></div></div><div style="text-align: justify;" powered-by="xiumi.us"><p style="white-space: normal;"><br></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>1 业务背景</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>什么是直播公会</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">直播公会是指从事网络直播表演的组织、制作、营销等经营活动和主播的签约、推广、代理等经纪活动的机构。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">B站为外部公会提供了主播全生命周期的管理系统，包含主播的入退会管理、主播营收数据分析、主播开播看播数据分析、直播监控、营收账单结算等功能子模块。</p><p style="word-break: break-all;white-space: normal;">同时为了鼓励、引导外部公会有针对性的对潜力主播进行孵化扶持，公会系统协同B站内部多业务方，提供一系列业务激励、流量策略，满足公会日常运营需求。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>公会业务对于数据查询场景分析</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>数据场景</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">公会系统主要的服务对象是外部公会运营人员，在日常公会运营工作中，通常关注以下数据：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">主播日维度准实时营收数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主播日维度准实时看播数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主播日维度准实时垂直业务数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">公会日维度准实时营收数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主播T+1任务进度</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主播T+1月、年维度营收数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主播T+1月、年维度看播数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主播T+1月、年维度垂直业务数据</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">公会月、年维度准实时营收数据</p></li></ul><p style="word-break: break-all;white-space: normal;">且对数据更新频率敏感，通常需要准实时的数据进行观测。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>查询数据量预估</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">截至2023年12月，B站公会主播量级为百万级，为满足各项业务数据查询需求，公会侧存储日粒度的主播业务数据，日均数据在百万级。</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">主播维度年度数据聚合：</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">预估数据量：1*365 = 365</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">公会维度日、周、月、年度数据聚合（以最大公会主播数据量级20万记）：</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">预估数据量：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">日-&nbsp;200000</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">周-200000&nbsp;*&nbsp;7&nbsp;=&nbsp;1,400,000</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">月-200000&nbsp;*&nbsp;30&nbsp;=&nbsp;6,000,000</p><p style="word-break: break-all;white-space: normal;">年-200000&nbsp;*&nbsp;365&nbsp;=&nbsp;73,000,000</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>2 技术方案选型/演进</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>数据方案选型：从MySQL到ClickHouse</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>MySQL数据查询压力</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">基于上述“查询数据量预估”，在索引设计合理的情况下，公会维度数据按月聚合已需要扫描至少6,000,000行数据。</p><p style="word-break: break-all;white-space: normal;">按照数据库配置4核8G，此时查询平均时间已达到20s+水平，无法满足业务要求。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>MySQL数据存储压力</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在公会主播百万级数据压力下，存储一年必要的热数据为：</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">1000000&nbsp;*&nbsp;365&nbsp;=&nbsp;365,000,000</p><p style="word-break: break-all;white-space: normal;">虽然可通过分库分表等方式缓解数据存储压力，但是在实际的查询场景中，分库分表存在着天然的数据查询硬伤，无法灵活的满足OLAP需求。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>数据查询QPS分析</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">对公会数据查询接口进行流量分析，需要查询准实时全量公会数据的QPS最高不超过20，通过梳理业务场景，针对大公会进行数据分流，即使未来公会业务大力发展，任然可以将接口整体QPS控制在50以下。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>难点</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">按照公会实际情况，主播与经纪人1：N关系，经纪人与其所属管理员1：N关系，并且经纪人、管理员进行数据查询时需要进行数据隔离，因此无法对汇总数据进行缓存或提前计算等操作。</p><p style="word-break: break-all;white-space: normal;">基于上述特性，数据量大、单次查询扫描行数多、查询QPS可控、数据频繁更新，选择ClickHouse作为数据处理工具支撑公会业务。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>技术方案演进：业务场景流量隔离，</strong></p><p><strong>OLAP业务重构数据链路</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>流量隔离</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">通过梳理业务场景，将数据查询分为以下三类：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;"><strong>外部公会后台准实时查询长时间跨度公会维度数据概览</strong></p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">此场景下，需要实时汇总登录用户权限范围内的数据概览，无法进行数据预热的同时需要进行大量数据计算。</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;"><strong>外部公会后台查询主播详细数据</strong></p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">仅需查询单主播数据，需要扫描的数据行数可控。</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;"><strong>T+1脚本查询数据计算任务进度</strong></p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">通过定时任务，T+1计算主播维度、公会维度任务进度，查询姿势可控、筛选条件较少，但QPS较高。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><br></p><p style="word-break: break-all;white-space: normal;">公会服务通过查询特性，将主播维度、短时间跨度、查询简单但QPS高的业务通过MySQL业务宽表进行支撑；将经纪人、管理员、公会维度等需要扫描大量数据的业务通过ClickHouse支持。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014566" data-ratio="0.25833333333333336" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltverXRFW1ZPQGCH5rox1IzBF7XqJsTSwVxBc1WLxRt3l8o3KLKZ2Fyg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>针对ClickHouse特性进行全局流量管控</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;"><strong>公会数据异步导出中心</strong></p></li></ul><p style="word-break: break-all;white-space: normal;">针对ClickHouse支持QPS较低的问题，公会服务针对数据导出场景进行全局限流，限制同时数据导出任务数量，控制导出任务查询频率等方式，支持公会大数据量场景下的数据导出功能。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014565" data-ratio="0.9145945945945946" data-s="300,640" data-type="png" data-w="925" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4lt7icOU4NKCbJukDw7gmet3PqnTOs4Xu7ggBYvOXPGE2oXSC10XicSgGsQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>3 ClickHouse表设计与优化</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如上文所述，我们运用ClickHouse支持直播公会场景的大数据量分析查询，同时需要ClickHouse支持数据更新写入（UPSERT）的功能。最初，我们采用ClickHouse的ReplacingMergeTree表引擎，借助其继承的MergeTree表引擎能力和去重特性，来支持数据的查询和更新。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">针对直播公会场景的更新需求、数据查询模式、数据过滤方式以及数据量规模等场景特征，我们的ClickHouse表采用了以下技术设计：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">设置去重键(record_date, uid)为主键索引和sharding key，设置mtime为版本，利用ReplacingMergeTree的合并机制和final修饰词，来完成实时更新。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">按月分区(substring(record_date, 1, 6))，减少文件的数量，降低查询的IO寻址消耗。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">使用复制表，增强数据可靠性。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">使用冷热存储策略，冷热数据使用不同存储介质，提升热数据的读写性能。</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><em>ReplacingMergeTree引擎的建表语句示例：</em></p><div style="line-height: 1.6;font-size: 16px;"><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">CREATE TABLE bili_live.ads_guild</span></code><br><code><span class="code-snippet_outer">(</span></code><br><code><span class="code-snippet_outer">`id` Int64,</span></code><br><code><span class="code-snippet_outer">`uid` Int64,</span></code><br><code><span class="code-snippet_outer">`guild_id` Int64,</span></code><br><code><span class="code-snippet_outer">`record_date` String,</span></code><br><code><span class="code-snippet_outer">`mtime` DateTime,</span></code><br><code><span class="code-snippet_outer">...</span></code><br><code><span class="code-snippet_outer">)</span></code><br><code><span class="code-snippet_outer">ENGINE = ReplicatedReplacingMergeTree(<span class="code-snippet__string">'/clickhouse/tables/{layer}-{shard}/bili_live/ads_guild'</span>, <span class="code-snippet__string">'{replica}'</span>, mtime)</span></code><br><code><span class="code-snippet_outer">PARTITION BY substring(record_date, <span class="code-snippet__number">1</span>, <span class="code-snippet__number">6</span>)</span></code><br><code><span class="code-snippet_outer">ORDER BY (record_date, uid)</span></code><br><code><span class="code-snippet_outer">TTL ...</span></code><br><code><span class="code-snippet_outer">SETTINGS index_granularity = <span class="code-snippet__number">8192</span>, storage_policy = <span class="code-snippet__string">'hot_and_cold'</span></span></code><br></pre></p></div><p style="word-break: break-all;white-space: normal;">ReplacingMergeTree会使用primary key(默认为order by键)做排序，并根据指定的version字段（上面SQL中的mtime字段）做去重，每个key只保留最新的那条数据。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>ReplacingMergeTree的问题</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">ReplacingMergeTree表引擎虽然支持了数据更新，但由于受限于其实现原理，ReplacingMergeTree存在以下问题：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">基于Merge-On-Read机制实现数据更新，使用单线程做数据合并，效率低。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">主键索引设置不够灵活，去重键必须和索引键保持一致，去重键不一定是业务常用的过滤字段，限制了主键索引的作用。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">final修饰词导致无法使用跳数索引做数据过滤。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">final修饰词导致无法使用prewhere的优化。</p></li></ul><p style="word-break: break-all;white-space: normal;">以上问题的存在使得ReplacingMergeTree表在查询时数据过滤效果不佳，并发度不够，最终导致查询性能受限，查询延迟不能很好地满足业务需求。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>Unique Engine</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">为了解决ReplacingMergeTree的上述问题，我们新增了一款Unique Engine表引擎，主要思路是在写入过程中通过标记删除(Delete-On-Insert)完成更新操作。下面我们比较一下ReplacingMergeTree引擎和Unique Engine引擎的查询执行模式，看看为什么Unique Engine引擎在查询性能方面更优。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014564" data-ratio="0.3233256351039261" data-s="300,640" data-type="png" data-w="866" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltqrp36ytRRrsbtlRpVO45hSSnZ6DmP0Ky4gcwLPodzbUWUwUXHRrPlA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">从上图可以看到，ReplacingMergeTree虽然也是多线程读取数据，但由于要实现相同key数据的去重（仅保留最新version的数据），最终需要在单线程中完成数据合并，这样就会影响查询性能，增加了查询延迟。而Unique Engine的数据读取和去重都是多线程并发完成的，不存在单线程合并的环节。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;"><em>UniqueEngine引擎的建表语句示例：</em></p><div style="line-height: 1.6;font-size: 16px;"><p class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="c"><code><span class="code-snippet_outer">CREATE TABLE bili_live.ads_guild</span></code><br><code><span class="code-snippet_outer">(</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;`id` Int64,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;`uid` Int64,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;`guild_id` Int64,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;`record_date` String,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;`mtime` DateTime,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;...</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;INDEX id_idx id TYPE bloom_filter(<span class="code-snippet__number">0.025</span>) GRANULARITY <span class="code-snippet__number">1</span>,</span></code><br><code><span class="code-snippet_outer"> &nbsp; &nbsp;INDEX uid_idx uid TYPE bloom_filter(<span class="code-snippet__number">0.025</span>) GRANULARITY <span class="code-snippet__number">1</span></span></code><br><code><span class="code-snippet_outer">)</span></code><br><code><span class="code-snippet_outer">ENGINE = ReplicatedUniqueMergeTree(<span class="code-snippet__string">'/clickhouse/tables/{layer}-{shard}/bili_live/ads_guild'</span>, <span class="code-snippet__string">'{replica}'</span>, mtime)</span></code><br><code><span class="code-snippet_outer">PARTITION BY substring(record_date, <span class="code-snippet__number">1</span>, <span class="code-snippet__number">6</span>)</span></code><br><code><span class="code-snippet_outer">ORDER BY (record_date, guild_id)</span></code><br><code><span class="code-snippet_outer">UNIQUE KEY (record_date, uid)</span></code><br><code><span class="code-snippet_outer">TTL ...</span></code><br><code><span class="code-snippet_outer">SETTINGS index_granularity = <span class="code-snippet__number">8192</span>, storage_policy = <span class="code-snippet__string">'hot_and_cold'</span>, enable_unique_key_bucket = <span class="code-snippet__number">1</span>, unique_key_deduplicate_level = <span class="code-snippet__number">1</span>, unique_key_index_type = <span class="code-snippet__number">1</span></span></code><br></pre></p></div><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">从建表SQL可以看到，我们增加了一个unique key，数据会基于unique key做去重，每个key仅保留version（上面SQL中的mtime字段）最新的那条数据。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">除了查询执行模式上的优势，Unique Engine同时解决了上文提到的ReplacingMergeTree的几个问题：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">拆分去重键和主键索引：设置(record_date, guild_id)为主键索引，以便使用主键索引做过滤。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">添加跳数索引：由于查询不再需要添加final修饰词，所以能够利用跳数索引跳过不需要扫描的数据。</p></li><li><p style="word-break: break-all;">prewhere优化：由于查询不再需要添加final修饰词，所以能够利用prewhere优化减少需要读取的数据量。</p></li></ul></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>4 Unique Engine设计原理与实现</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">上一节我们阐述了如何通过引入Unique Engine引擎解决ReplacingMergeTree引擎的问题，下面我们将详细介绍Unique Engine的原理与实现。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">针对分析型场景支持数据更新这一问题，行业内常见的设计思路有两种：Merge-On-Read和Delete-On-Insert。例如，HBase和ClickHouse的ReplacingMergeTree就是在查询过程中通过Merge-On-Read做数据更新；而StarRocks和ByConity则都是通过Delete-On-Insert在写入过程中做标记删除。</p><p style="word-break: break-all;white-space: normal;">由于在我们大部分有更新需求的场景下，数据量都相对较小，对数据写入的延迟要求较低），而对数据查询延迟的要求比较高，所以经过详细评估后，我们采用了Delete-On-Insert的设计思路。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>方案设计</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014568" data-ratio="0.5194444444444445" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltdkeq6neP1eXIxDmO6JRypG5Qcx6kQ0ErLJ9H3zU1AbRwCIZtYkylMw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">为了支持Delete-On-Insert机制，我们在ClickHouse data part内部新增了三种数据结构：</p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="word-break: break-all;margin-bottom: 15px;">unique key minmax index：用于存储unique key的最大值和最小值，通过极值判断快速跳过不需要扫描的data part。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">unique key index：用于存储所有unique key的唯一值，并进行了hash分桶，以加快其加载的速度。</p></li><li><p style="word-break: break-all;margin-bottom: 15px;">delete bitmap：用于标记data part内部删除的数据，记录其对应的行号。</p></li></ul><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在写入过程中，扫描历史数据，并依次检查unique key minmax index和unique key index，如果发现历史数据的data part中有相同的unique key，且未被删除，则在delete bitmap中记录其行号，标记删除。在查询和合并的过程中，依赖delete bitmap过滤删除数据，避免了merge on read单线程做合并的问题。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">对于unique key index，我们支持了map、unordered_map、StringHashMap三种类型，其中unordered_map占用内存相对较小，但在常驻内存的模式下，如果unique key的数量非常多的话，还是会占用很大的内存，影响业务的正常查询，所以我们场景中使用的是非常驻内存模式。</p><p style="word-break: break-all;white-space: normal;">由于data part内部的行号是递增数值类型，所以非常适合使用bitmap类型来存储删除的行号，这样不仅占用空间小，检索速度还非常快。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>写入合并冲突</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">写入和合并是两条独立的链路，它们是很有可能同时发生的。在合并期间进行写入操作，如果合并未感知到写入的标记删除，就会引发冲突，造成数据重复的问题。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014570" data-ratio="0.6154649947753396" data-s="300,640" data-type="png" data-w="957" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4lthCQ6cNicX3BdaFfDJ5fsM8abH6gHFGYmoDZeloHrPJmOrKkkaJ9sFpw/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">如图所示，在part_1_1_0和part_2_2_0合并的过程中，写入了part_3_3_0，虽然part_3_3_0已经标记了part_1_1_0中的unique key 'jack'需要删除，但由于merge任务在标记删除之前，已经完成了对part_1_1_0的读取，所以导致最后的结果中，出现了重复的数据。</p><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">为了解决这个冲突，我们采用了cas原子性变更part状态+commit lock的方案，以保证幂等性更新。在写入过程中，如果发现历史part正处于合并中，会对历史part做两份标记，一份是part级别，另一份是table级别，part级别是为了实时读取的准确性，table级别是为了最终的数据去重。</p><p style="word-break: break-all;white-space: normal;">再回到刚才的问题，part_3_3_0在写入的过程中，发现part_1_1_0正在合并，则会对part_1_1_0做两份标记，part级别和table级别都会记录unique key 'jack'的删除信息。当part_1_1_0和part_2_2_0合并到临时文件后，在提交的时候，会发现table级别有关于part_1_1_0的标记信息，则会对unique key 'jack'做最后的删除，保证了数据去重。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>去重加速</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>并行比较</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014569" data-ratio="0.5990740740740741" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4lth2r1l4Ic3OqsbJYOQt399icTean5URAEYkMT50bbia2wlk4NYxHfHuvA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">在写入过程中，新写入的data part需要与历史data part进行比较，以筛选出并标记需删除的数据。传统的串行比较方法效率低，影响了写入性能。为了提高写入效率，我们将历史数据部分进行分组，并采用多线程并行比较的方式，以此来提升数据写入的速度。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;color: rgb(12, 182, 242);"><p><strong>Hash分桶</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014567" data-ratio="0.5092592592592593" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltqFl7FxW2cfxBa16xicOM0Fnt1fpa7LGKyCJRk3hkyOUZ1715muFBQsQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">unique key index是行级索引，占用存储空间较大。如果unique key index常驻内存，则内存消耗过大，在我们的实际场景中不可行；而如果unique key index非常驻内存，则每次写入在做去重前都需要将unique key index加载进内存。为了减少每次写入需要加载的unique key index数据量，我们对Unique index进行了hash分桶，每次写入时仅加载可能与写入数据重复的分桶，从而提升整体写入性能。</p><p style="word-break: break-all;white-space: normal;">综上所述，我们通过并行比较和unique key index分桶加载的方式实现unique key的去重，从而在内存占用和写入速度之间达到一个平衡，以保障幂等性写入。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>复制表副本去重</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">为使用ClickHouse副本特性(比如备份数据，同时提供读写能力等)，我们支持了Unique Engine的副本功能。Unique Engine会对历史的data part进行实时更新，所以副本之间是需要同步更新的信息，为降低对zookeeper的影响，目前采用的是副本二次去重，即拉取的data part会与历史的data part重新进行比较，以保证幂等性写入。同为shard的两个副本节点，为保证两个副本的数据一致性，只能由一个节点完成合并，另一个节点只能去拉取合并后的data part。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>重复数据的过滤</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014571" data-ratio="0.5638888888888889" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltiau6Tufkz49lUgjG6u3euUuZUjU34iayuO17nZ73M1uibR4lvxCdpABoQ/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">ClickHouse内部的过滤筛选是通过bit column实现的，1代表满足筛选条件，0代表不满足。ClickHouse的prewhere过滤结果就是通过bit column表示的。delete bitmap的作用是过滤掉已删除的数据，因此在进行数据过滤时，我们将delete bitmap转换成为bit column进行过滤。</p><p style="word-break: break-all;white-space: normal;">对于存在prewhere的查询，我们将delete bitmap bit列与prewhere bit列进行交集操作，这样不仅能够过滤无效的数据，还可以结合prewhere的能力，提升整体的查询性能。对于不存在prewhere的查询和合并，则直接依赖于delete bitmap的bit column进行过滤，获取有效的数据集。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>5 Unique Engine</strong></p><p><strong>在直播公会</strong><strong>场景的</strong><strong>落地效果</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">查询性能对比</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014576" data-ratio="0.7476538060479666" data-s="300,640" data-type="png" data-w="959" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4lt2oMbOwg2wSTBjvHlnWM3lYxCTyFavZibC2j4wtEGDGJosZhaMppQwkA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">上图是七种业务查询在不同表引擎下的耗时对比图，如图所示，受益于Unique Engine的特性(灵活的主键索引、不受final限制的跳数索引等)，查询性能均得到大幅提升，整体提升了大约10x~20x。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014574" data-ratio="0.12222222222222222" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltSbeXBvR5Dicibu7zEDFv6uHPAMDkhQhRQAk4WicalrV2RYG5Gic3iaciaW5Q/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014573" data-ratio="0.5722120658135283" data-s="300,640" data-type="png" data-w="547" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltojjtnayMiagA8l9vww8URsbCYN9G8NxCFicTxCK0FOykszKXscA9mwdw/640?wx_fmt=png&amp;from=appmsg"></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014575" data-ratio="0.5675182481751825" data-s="300,640" data-type="png" data-w="548" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltibpxEXCjUl1Ff8o179Z7EV5fBR9zxtGWT9cXR7O63syINKXv6CsiaKCA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">使用ReplacingMergeTree表引擎，部分查询延迟无法保证在亚秒内，而且日均扫描数据量达60TB+。</p><p style="word-break: break-all;white-space: normal;">使用UniqueMergeTree表引擎，最大耗时可以保证在亚秒内，p90查询性能提升了5x，日均扫描数据量减少了6x，集群资源节省了50%。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>写入性能对比</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014572" data-ratio="0.13240740740740742" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltuG2TW82GceFbYXuMq2ZCyRyFW6JrPSSWSVXuJSS0S1HlBT0Cv15d2Q/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">在写入方面，使用UniqueMergeTree表引擎后，相较于ReplacingMergeTree表引擎有10x的性能损耗，而且去重比较的历史数据量越大，去重性能越差。</p><p style="word-break: break-all;white-space: normal;">针对MySQL2ClickHouse的数据写入场景，由于整体数据量相对较小，大多数都在千万级别以内。在我们的场景中，写入带来资源消耗比较小，平均写入延迟依然在亚秒级别。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>6 Unique Engine写入性能优化方案</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">如上文所述，虽然我们做了各种优化（如并发比较，hash分桶），但Unique Engine相较ReplacingMergeTree仍然有10+倍的写入性能下降。因此，在Unique Engine落地直播公会场景后，我们对unique engine写入性能优化做了进一步的探索。通过做写入性能分析，我们发现性能瓶颈主要在两个地方：一个是unique key index的加载；另一个是unique key的比较。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014579" data-ratio="0.6611111111111111" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltx36rO75jgFnG4KnnksSg3lfiayzJAmsOvjpY5TbicbGQPI4Y1kQPnnRg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">unique key index的加载：就是将unique key index从磁盘反序列化到内存中。虽然使用了hash分桶，但在某些写入场景下，hash后的key比较离散，导致几乎每次都需要把data part中的所有unique key加载到内存中。</p><p style="word-break: break-all;white-space: normal;">unique key的比较：就是比较新写入的data part和历史的data part的unique key。新写入的所有keys都需要和历史存在的所有keys比较。比如有4个历史data&nbsp;part，新写入的data part有10个unique key，那么意味着至少需要比较4 * 10&nbsp; &nbsp;= 40次。当写入数据或历史数据较多时，key的比较次数巨大，从而影响整体写入性能。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014581" data-ratio="0.6685185185185185" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltTjckkJj9EibZNjHoHmeKqFSzLNndQF2nqP457a8eCHVgON15aqbPYXg/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;margin-bottom: 15px;white-space: normal;">围绕上述写入性能瓶颈，我们对Unique Engine的写入做了进一步优化。主要思路是将unique key存储到LevelDB，在数据写入时，对新写入的数据做排序后构建有序key iterator，同时对LevelDB中的历史数据也构建有序key iterator，然后对两个有序key iterators做顺序比较，利用LevelDB索引跳过不需比较的数据。这样不仅可以借助LevelDB的特性(如有序性，索引、block)缩小unique key的加载范围，减少无效的加载，还可以减少unique key的比较次数，从而大幅提升写入性能。</p><p style="word-break: break-all;white-space: normal;">我们实现了上述写入优化，经测试验证，上述优化可将写入延迟降低数倍，性能提升效果如下：</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100014578" data-ratio="0.13333333333333333" data-s="300,640" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QeLns1nssRRWygWjiahn4ltgY43AiaJtWQibTEjvVQFQ9X4eKVzyOrjNaicGgMFE2hYHEyFrIGJfAqqA/640?wx_fmt=png&amp;from=appmsg"></p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">另外，优化前Unique Engine写入耗时与历史数据成正比，而优化后的版本由于利用LevelDB的索引跳过无需比较的数据，所以写入性能大体上是和新写入的数据量成正比的，所以在线上数据量较大的场景下，性能提升效果会更为明显。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><div style="display: inline-block;vertical-align: top;padding-left: 10px;"><div style="border-bottom: 1px dashed rgb(0, 0, 0);padding-left: 5px;font-size: 20px;color: rgb(12, 182, 242);"><p><strong>7 下一步的工作</strong></p></div><div style="margin-top: -7px;margin-left: -10px;width: 10px;"><p style="transform: rotate(0deg);margin-left: auto;width: 7px;height: 7px;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><p style="margin-top: -4px;margin-left: -3px;width: 10px;height: 10px;background-color: rgb(12, 182, 242);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>LevelDB Unique Key Index全覆盖</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">目前线上运行的大部分Unique Engine场景使用的还是Map类型的Unique Key Index，我们将推进LevelDB Unique Key Index的全覆盖，从而大幅提升ClickHouse更新场景的写入性能。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><div style="display: inline-block;"><p style="width: 0.7em;height: 0.7em;margin-right: 5px;margin-top: 0.5em;display: inline-block;vertical-align: top;background-color: rgb(255, 102, 149);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;text-align: center;font-size: 18px;color: rgb(12, 182, 242);"><p><strong>&nbsp;接入链路优化</strong></p></div></div></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="padding-right: 8px;padding-left: 8px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;">目前MySQL到ClickHouse的写入链路较长，需要经过Canal，Kafka，Flink等组件才能最终写入到ClickHouse，不仅增加了数据链路的复杂性和运维成本，同时也使得用户的业务接入门槛较高，阻碍了业务场景的拓展。我们计划采用Flink CDC，配合上层接入服务支持，实现MySQL到ClickHouse数据同步链路的一站式构建配置，降低业务接入门槛，进而拓展更多业务场景。</p></div><p style="white-space: normal;" powered-by="xiumi.us"><br></p><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>开发者问答</strong></p></div></div></div><div style="padding-right: 8px;padding-left: 8px;font-size: 13px;" powered-by="xiumi.us"><p style="word-break: break-all;white-space: normal;"><span style="color: rgb(255, 102, 149);"><strong>针对包含数据更新的数据同步与分析场景，如何同时满足高性能分析查询和低延迟数据同步的业务需求？大家有什么更好的实践方案呢？</strong></span>欢迎在留言区告诉我们。转发并留言，小编将选取1则最有价值的评论，送出<span style="text-decoration: underline;"><strong>小电视校园系列金属徽章两只</strong></span>（见下图）。<span style="color: rgb(255, 102, 149);"><strong>1月26日中午12点开奖。如果喜欢本期内容的话，欢迎点个“在看”吧！</strong></span></p></div><div style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><p style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100014580" data-ratio="1" data-s="300,640" data-type="jpeg" data-w="800" style="vertical-align: middle;width: 100%;" src="https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QeLns1nssRRWygWjiahn4ltfwcNQwRA2AwhD7lL3Cq7lDPPvTFz3OOHmrbhfcyOtrHiavugebEe6WA/640?wx_fmt=jpeg&amp;from=appmsg"></p></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><p style="display: inline-block;vertical-align: top;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;padding-right: 5px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></p><div style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-color: rgb(30, 88, 134);min-width: 5%;height: auto;padding: 5px;"><div style="text-align: justify;color: rgb(12, 182, 242);" powered-by="xiumi.us"><p style="white-space: normal;"><strong>往期精彩指路</strong></p></div></div></div><div style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row nowrap;margin-top: 5px;margin-bottom: 10px;" powered-by="xiumi.us"><div style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(234, 244, 255, 0.34);padding: 25px;height: auto;"><div style="transform: translate3d(-5px, 0px, 0px);" powered-by="xiumi.us"><div style="text-align: justify;padding-right: 8px;padding-left: 8px;font-size: 13px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247490544&amp;idx=1&amp;sn=2a6a72ac932911988968ef5c83d2e0be&amp;chksm=cf2cded5f85b57c384a6d6a3c0d86cf118089aa76e514dd70e051dd2c4186e5bdda57e1f0c60&amp;scene=21#wechat_redirect" textvalue="B站基于Clickhouse的下一代日志体系建设实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站基于Clickhouse的下一代日志体系建设实践</a></p></li><li><p style="margin-bottom: 15px;"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247492947&amp;idx=1&amp;sn=80129ec789ab0ceda969866290520f23&amp;chksm=cf2f2076f858a9604e0a42544cc4e372394bc58274c33bae518bb5318e443d7f0505ac3267bb&amp;scene=21#wechat_redirect" textvalue="B站基于ClickHouse的海量用户行为分析应用实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站基于ClickHouse的海量用户行为分析应用实践</a></p></li><li><p><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247492518&amp;idx=1&amp;sn=c941a04a8b29117c93f9e7dd96e08ce0&amp;chksm=cf2f2683f858af95873d080d7f3e415483e3fc6418dec85e67c324805ff895f9c2e722080bd7&amp;scene=21#wechat_redirect" textvalue="B站数据服务中台建设实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">B站数据服务中台建设实践</a></p></li></ul></div></div></div></div><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="Mzg3Njc0NTgwMg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png" data-nickname="哔哩哔哩技术" data-alias="bilibili-TC" data-signature="提供B站相关技术的介绍和讲解" data-from="0" data-is_biz_ban="0"></mp-common-profile></p><p class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzUxNTE4OTc0Mg==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png" data-nickname="哔哩哔哩招聘" data-alias="" data-signature="生产快乐的地方" data-from="0" data-is_biz_ban="0"></mp-common-profile></p></div><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p>]]></summary>
        <author>
            <name>杨博&amp;王智博</name>
        </author>
    </entry>
</feed>